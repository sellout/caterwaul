let kCat =
      ./Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./Monoidal/Cartesian/extractMonoidal sha256:25afdf2818357f9c4b9dac6652b82e730472c389a634f8417a6014d39c7cddc0
      kCat
      Type
      vObject
      ./Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

let vBase =
      ./Monoidal/extractCategory sha256:936b393338b8dcf60af6c25ecea2b0b02d83e18acfed60ff736754fe0c1d7b3d
      kCat
      Type
      vObject
      v

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          kCat
          vObject
          object
        )
    → λ ( category
        : ./Type sha256:5792bd3a482ad0d318aecda464bd952a6561dc1119bdc1f5db574cfc3b66e095
          object
          v
          cat
        )
    → λ(c : object)
    →   { map =
              λ(x : object)
            → λ(y : object)
            → λ(fn : cat.arrow { _1 = y, _2 = x })
            → λ(input : cat.arrow { _1 = x, _2 = c })
            → category.op
              { _1 = y, _2 = c }
              (   λ(r : Type)
                → λ ( arrowsOut
                    :   ∀(z : object)
                      → cat.arrow { _1 = z, _2 = c }
                      → cat.arrow { _1 = y, _2 = z }
                      → r
                    )
                → arrowsOut x input fn
              )
        }
      : ./../Functor/Contravariant sha256:5cac00b722fed910bc5b8637f00ec1361decf3c8936a4336631a4cf3ba1d20e6
        vObject
        object
        vObject
        vBase
        cat
        vBase
        (λ(x : object) → cat.arrow { _1 = x, _2 = c })
