{- This cheats a bit on the identity, since `dObject` is Type, we don‚Äôt need a
   functor **Set** ‚Üí ùíü.
-}
let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

let MonoidalCategory = ./../Monoidal/Kind kArrow kProduct vObject

in    Œª(cObject : Kind)
    ‚Üí let dObject = Type
      
      in    Œª(v : ./../Kind kArrow kProduct Type vObject)
          ‚Üí Œª(c : MonoidalCategory cObject)
          ‚Üí Œª(d : MonoidalCategory dObject)
          ‚Üí let base = ./../Monoidal/extractCategory kArrow kProduct vObject
            
            in      { identity =
                        Œª(x : cObject) ‚Üí c.arrow { _1 = c.identity, _2 = x }
                    , op =
                        ./../../Day/Type cObject d c
                    }
                  ‚àß ./category
                    cObject
                    dObject
                    v
                    (base cObject c)
                    (base dObject d)
                : MonoidalCategory (kArrow cObject dObject)
