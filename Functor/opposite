let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(vObject : Kind)
    → λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(v : ./../Category/Kind kArrow kProduct Type vObject)
    → λ(c : ./../Category/Kind kArrow kProduct vObject cObject)
    → λ(d : ./../Category/Kind kArrow kProduct vObject dObject)
    → λ(f : kArrow cObject dObject)
    → λ(functor : ./Type vObject cObject dObject v c d f)
    →   { map = λ(a : cObject) → λ(b : cObject) → functor.map b a }
      : ./Type
        vObject
        cObject
        dObject
        v
        (./../Category/Op/Kind vObject cObject c)
        (./../Category/Op/Kind vObject dObject d)
        f
