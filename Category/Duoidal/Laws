let kCat =
      ./../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./Kind sha256:477d8185fbbe496496f87216c1204a2367ff703d5ca3b0c7495f17c43ac4dec6
          kCat
          vObject
          object
        )
    → let additive =
            ./extractAdditive sha256:868060f11fb386ceaa98cb7dc5d6da8b7ddcde2c9674da7ce9f0e598269c2004
            kCat
            vObject
            object
            cat
      
      let multiplicative =
            ./extractMultiplicative sha256:fef92f72e30bf84551fae14ba281414b952d166146fc061b212ea3c0afef650d
            kCat
            vObject
            object
            cat
      
      in  { swap :
                ∀(a : object)
              → ∀(b : object)
              → ∀(c : object)
              → ∀(d : object)
              → cat.arrow
                { _1 =
                    additive.op
                    { _1 =
                        multiplicative.op { _1 = a, _2 = b }
                    , _2 =
                        multiplicative.op { _1 = c, _2 = d }
                    }
                , _2 =
                    multiplicative.op
                    { _1 =
                        additive.op { _1 = a, _2 = c }
                    , _2 =
                        additive.op { _1 = b, _2 = d }
                    }
                }
          , split :
              cat.arrow
              { _1 =
                  additive.identity
              , _2 =
                  multiplicative.op
                  { _1 = additive.identity, _2 = additive.identity }
              }
          , combine :
              cat.arrow
              { _1 =
                  additive.op
                  { _1 = multiplicative.identity, _2 = multiplicative.identity }
              , _2 =
                  multiplicative.identity
              }
          , switch :
              cat.arrow { _1 = additive.identity, _2 = multiplicative.identity }
          , additive :
              ./../Monoidal/Laws sha256:eb4bcdd8e582d07218c606de30c733d05a3dc01cd63d72cd7704f88b6c881b81
              object
              additive
          , multiplicative :
              ./../Monoidal/Laws sha256:eb4bcdd8e582d07218c606de30c733d05a3dc01cd63d72cd7704f88b6c881b81
              object
              multiplicative
          }
