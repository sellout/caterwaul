let kCat =
      ./Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./Monoidal/Cartesian/extractMonoidal sha256:0fcc63fc837459ca2866d31c5b11400b56fcb8f7d1846b774e98b47995c1879a
      kCat
      Type
      vObject
      ./Set/monoidal/cartesian sha256:b6efbdc0effbca1bc7427c980f2579012808494a8195fdf9fb52aea37ae91116

let vBase =
      ./Monoidal/extractCategory sha256:be63455106b8fe90ee7366a02f05b29c1aa42e63243bb9994d55011052eab6ec
      kCat
      Type
      vObject
      v

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          kCat
          vObject
          object
        )
    → λ ( category
        : ./Type sha256:a3968397f7c9a309d7c4eed545517a4e6f451eff463aaaf274fd1c7d37cb3004
          object
          v
          cat
        )
    → λ(c : object)
    →   { map =
              λ(x : object)
            → λ(y : object)
            → λ(fn : cat.arrow { _1 = x, _2 = y })
            → λ(input : cat.arrow { _1 = c, _2 = x })
            → category.product
              { _1 = c, _2 = y }
              (   λ(r : Type)
                → λ ( arrowsOut
                    :   ∀(z : object)
                      → cat.arrow { _1 = z, _2 = y }
                      → cat.arrow { _1 = c, _2 = z }
                      → r
                    )
                → arrowsOut x fn input
              )
        }
      : ./../Functor/Type sha256:bebd999f32d6a3fd9bd7151ca5f0942ed6aeded30809c4a7e6c91382bed2dbcb
        vObject
        object
        vObject
        vBase
        cat
        vBase
        (λ(x : object) → cat.arrow { _1 = c, _2 = x })
