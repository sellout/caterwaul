let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(d : ./../Category/Kind kArrow kProduct vObject dObject)
    → let object = kArrow cObject dObject
      
      in    (   λ(f : { _1 : object, _2 : object })
              → ∀(a : cObject) → d.arrow { _1 = f._1 a, _2 = f._2 a }
            )
          : kArrow (kProduct object object) vObject
