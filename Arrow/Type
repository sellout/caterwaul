let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let vObject = Type

let Category/Semigroupal =
      ./../Category/Semigroupal/Kind sha256:c397273f09d2bc88d7fb86edfcdc776644a7d9ad34ecd55177bd834e624af11e

let extractCategory =
      ./../Category/Semigroupal/extractCategory sha256:e91af8eaf3c5c29c44bd0fc193a537c6048ddbb6adc6d17f2631ebd27f4de897

let Category =
      ./../Category/Type sha256:b5245b1f92f65f1b72bbfac6c53ebc19dc3c778b775b19ea4ad73fa6d2569dcb

let Strong =
      ./../Strong/Type sha256:756061802c96ae4038f3c9b66153199f7660862a56802d213746a1227ba05234

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:f05d8665b46c686b6b930ad18aad6e1daa8c7a9c104d7bbeec947389d4d83e48
          kArrow
          kProduct
          Type
          vObject
        )
    → λ(cat : Category/Semigroupal kArrow kProduct vObject object)
    → let base = extractCategory kArrow kProduct vObject object cat
      
      in    { split :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → ∀(d : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = c, _2 = d }
                → cat.arrow
                  { _1 =
                      cat.op { _1 = a, _2 = c }
                  , _2 =
                      cat.op { _1 = b, _2 = d }
                  }
            , fanout :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = a, _2 = c }
                → cat.arrow { _1 = a, _2 = cat.op { _1 = b, _2 = c } }
            }
          ⩓ Category object v base
          ⩓ Strong object object v base base cat.arrow
