{- In a Leibniz category, identity is refl, and op is transitivity. -}
let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let vObject = Type

in    λ ( cObject
        : Kind
        )
    → λ(dObject : Kind)
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:f05d8665b46c686b6b930ad18aad6e1daa8c7a9c104d7bbeec947389d4d83e48
          kArrow
          kProduct
          Type
          vObject
        )
    → λ ( c
        : ./../Category/Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
          kArrow
          kProduct
          vObject
          cObject
        )
    → λ ( d
        : ./../Category/Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
          kArrow
          kProduct
          vObject
          dObject
        )
    → λ ( dCategory
        : ./../Category/Type sha256:b5245b1f92f65f1b72bbfac6c53ebc19dc3c778b775b19ea4ad73fa6d2569dcb
          dObject
          v
          d
        )
    → let Leibniz =
            ./Kind sha256:3b3493422c5f205484219d6726b5cc60f39f501f5e750e5e44d2053e3ab87f77
            cObject
            dObject
            c
            d
      
      in    { identity =
                  λ(a : cObject)
                → { subst =
                      λ(f : kArrow cObject dObject) → dCategory.identity (f a)
                  }
            , op =
                  λ(a : { _1 : cObject, _2 : cObject })
                → λ ( p
                    :   ∀(r : Type)
                      → (   ∀(z : cObject)
                          → Leibniz.arrow { _1 = z, _2 = a._2 }
                          → Leibniz.arrow { _1 = a._1, _2 = z }
                          → r
                        )
                      → r
                    )
                → { subst =
                        λ(f : kArrow cObject dObject)
                      → dCategory.op
                        { _1 = f a._1, _2 = f a._2 }
                        (   λ(r : Type)
                          → λ ( arrowsOut
                              :   ∀(z : dObject)
                                → d.arrow { _1 = z, _2 = f a._2 }
                                → d.arrow { _1 = f a._1, _2 = z }
                                → r
                              )
                          → p
                            r
                            (   λ(z : cObject)
                              → λ(g : Leibniz.arrow { _1 = z, _2 = a._2 })
                              → λ(h : Leibniz.arrow { _1 = a._1, _2 = z })
                              → arrowsOut (f z) (g.subst f) (h.subst f)
                            )
                        )
                  }
            }
          : ./../Category/Type sha256:b5245b1f92f65f1b72bbfac6c53ebc19dc3c778b775b19ea4ad73fa6d2569dcb
            cObject
            v
            Leibniz
