let kCat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let Category/Semigroupal =
      ./../Category/Semigroupal/Kind sha256:e76288137b213da343b09207c0c8a72bd551a21712d3d7f2089342e1968ba699

let extractCategory =
      ./../Category/Semigroupal/extractCategory sha256:6f1f56b9a2979d9d15d3f85459a5869f8122619c2dbd3b7ba0d982c6de320222

let Category =
      ./../Category/Type sha256:5792bd3a482ad0d318aecda464bd952a6561dc1119bdc1f5db574cfc3b66e095

let Strong =
      ./../Strong/Type sha256:7c36ad50721347c7e886786fe21b1ab6281c18682f378b5f5809ab7e53274a09

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:6eb37e632903173c5ec1600564aa614697c4b58719773c4e4c66a76f095d1636
          kCat
          Type
          vObject
        )
    → λ(cat : Category/Semigroupal kCat vObject object)
    → let base = extractCategory kCat vObject object cat
      
      in    { split :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → ∀(d : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = c, _2 = d }
                → cat.arrow
                  { _1 =
                      cat.op { _1 = a, _2 = c }
                  , _2 =
                      cat.op { _1 = b, _2 = d }
                  }
            , fanout :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = a, _2 = c }
                → cat.arrow { _1 = a, _2 = cat.op { _1 = b, _2 = c } }
            }
          ⩓ Category object v base
          ⩓ Strong object object v base base cat.arrow
