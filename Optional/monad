let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let object = Type

let cat =
      ./../Category/Monoidal/extractCategory
      kArrow
      kProduct
      vObject
      object
      ./../Category/Set/monoidal/cartesian

let category = ./../Category/Set/category

in    { identity =
          λ(a : Type) → λ(x : a) → Some x
      , op =
            λ(a : Type)
          → λ(mma : Optional (Optional a))
          → Optional/fold
            (Optional a)
            mma
            (Optional a)
            (category.identity (Optional a))
            (None a)
      }
    : ./../Monad/Type object cat Optional
