{- TODO: This would be `./../Group/Type … (./../Category/Monoidal/Profunctor
         object morphism)`, but `Category` isn’t defined via `Monoid`, so we
		 prefer compatibility with that.
-}
let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → let profunctor = kArrow (kProduct object object) vObject
      
      in    λ(morphism : profunctor)
          →   { inverse :
                  ∀(a : { _1 : object, _2 : object }) → morphism a → morphism a
              }
            ⩓ ./../Category/Type object v cat
