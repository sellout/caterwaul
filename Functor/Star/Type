{- A functor from a Kleisli category to the underlying non-Kleisli category.
-}
let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(vObject : Kind)
    → λ(object : Kind)
    → λ(v : ./../../Category/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../../Category/Kind kArrow kProduct vObject object)
    → λ(m : kArrow object object)
    → ./../Type
      vObject
      object
      object
      v
      (./../../Category/Kleisli/category vObject object cat m)
      cat
