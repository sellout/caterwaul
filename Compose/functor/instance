let kArrow =
      ./../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let Functor =
      ./../../Functor/Type sha256:fe94261bd581198ae1523ffbe7037159ad8327199b42ee3f97d16a7e1fa1dc79

in    λ ( cObject
        : Kind
        )
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(dObject : Kind)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(eObject : Kind)
    → λ(eArrow : kArrow (kProduct eObject eObject) Type)
    → λ(f : kArrow dObject eObject)
    → λ(fFunctor : Functor dObject eObject dArrow eArrow f)
    → λ(g : kArrow cObject dObject)
    → λ(gFunctor : Functor cObject dObject cArrow dArrow g)
    →   { map =
              λ(a : cObject)
            → λ(b : cObject)
            → λ(k : cArrow { _1 = a, _2 = b })
            → fFunctor.map (g a) (g b) (gFunctor.map a b k)
        }
      : Functor
        cObject
        eObject
        cArrow
        eArrow
        ( ./../Type sha256:e18cb4b2004c6cf2789b492be4e1b912e3299eca94c229dc5913a11d55bcd72c
          cObject
          dObject
          eObject
          { _1 = f, _2 = g }
        )
