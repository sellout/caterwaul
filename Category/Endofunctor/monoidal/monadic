{- NB: This doesn’t use `Duoidal/extractMultiplicative` because that has a fixed
      `object`.
-}
let kArrow =
      ./../../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let Category =
      ./../../Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
      kArrow
      kProduct

let Endofunctor =
      ./../../../Functor/Endo/Type sha256:f7141343200ccaa9a1f80d06732e331624a3edd9e92b9ec3153db87c468fafe3

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ(v : Category Type vObject)
    → λ(cat : Category vObject object)
    →   { constraint =
            Endofunctor vObject object v cat
        , arrow =
            ./../../../NaturalTransformation/Type sha256:1fb48a77c7998793c06084794271a92131143f42dc9f1a95cd8146b6aeda7d5e
            object
            object
            cat
        , identity =
            ./../../../Identity/Type sha256:0f2ca3c3cd4682978197536d6365c4002a9b95ebbe882e8562879ee16736c3ae
            object
        , op =
            ./../../../Compose/Type sha256:e18cb4b2004c6cf2789b492be4e1b912e3299eca94c229dc5913a11d55bcd72c
            object
            object
            object
        }
      : ./../../Monoidal/Kind sha256:f05d8665b46c686b6b930ad18aad6e1daa8c7a9c104d7bbeec947389d4d83e48
        kArrow
        kProduct
        vObject
        (kArrow object object)
