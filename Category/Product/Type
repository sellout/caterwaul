let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → let object = { _1 : cObject, _2 : dObject }
      
      in    (   λ(a : { _1 : object, _2 : object })
              → { _1 :
                    cArrow { _1 = a._1._1, _2 = a._2._1 }
                , _2 :
                    dArrow { _1 = a._1._2, _2 = a._2._2 }
                }
            )
          : kArrow (kProduct object object) Type
