{- NB: Since this is currently forced to be in *Set*, it’s quite possible that
       some of the uses of _C_ and _D_ are wrong, since the type system can’t
       distinguish them. So take them with a grain of salt if you’re editing
       this file.
-}
let cat =
      ./../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let base =
      ./../../Category/Monoidal/Cartesian/extractMonoidal sha256:25afdf2818357f9c4b9dac6652b82e730472c389a634f8417a6014d39c7cddc0
      cat

let MonoidalFunctor =
      ./../../Functor/Monoidal/Type sha256:7d4a68165b33b76bf9e8d8ab6fc8739699a1260549ebee624e57d8cab06f97c0

let vObject = Type

in    λ ( cObject
        : Kind
        )
    → λ ( v
        : ./../../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          Type
          vObject
        )
    → λ ( vCategory
        : ./../../Category/Type sha256:5792bd3a482ad0d318aecda464bd952a6561dc1119bdc1f5db574cfc3b66e095
          vObject
          ( base
            vObject
            Type
            ./../../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576
          )
          v
        )
    → λ ( c
        : ./../../Category/Monoidal/Kind sha256:6eb37e632903173c5ec1600564aa614697c4b58719773c4e4c66a76f095d1636
          cat
          vObject
          cObject
        )
    → let dObject =
            Type
      
      let d =
            base
            vObject
            dObject
            ./../../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576
      
      let eObject = Type
      
      let e =
            base
            vObject
            eObject
            ./../../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576
      
      let Compose =
            ./../Type sha256:e830545569ce8ba04d3124a7ca93994fc93e18c0372616f45910253f0a00907d
            cObject
            dObject
            eObject
      
      let Day =
            ./../../Day/Type sha256:75bb9592fce61b6be1565b8b7589763f51b71a9dab310fd5b9c72dbce176a67f
            cObject
            e
            c
      
      let Day/convolution =
            ./../../Day/convolution sha256:ca965ddd64a13ff9661a3e175fa344344e188283b59f6620afb6ffb36fe95ba5
      
      in    λ(f : cat.arrow dObject eObject)
          → λ(fMonoidal : MonoidalFunctor dObject v d e f)
          → λ(g : cat.arrow cObject dObject)
          → λ(gMonoidal : MonoidalFunctor cObject v c d g)
          →   { map =
                    λ(a : cObject)
                  → λ(b : cObject)
                  → vCategory.op
                    { _1 =
                        c.arrow { _1 = a, _2 = b }
                    , _2 =
                        e.arrow { _1 = f (g a), _2 = f (g b) }
                    }
                    (   λ(r : Type)
                      → λ ( arrowsOut
                          :   ∀(z : vObject)
                            → v.arrow
                              { _1 =
                                  z
                              , _2 =
                                  e.arrow { _1 = f (g a), _2 = f (g b) }
                              }
                            → v.arrow
                              { _1 = c.arrow { _1 = a, _2 = b }, _2 = z }
                            → r
                          )
                      → arrowsOut
                        (d.arrow { _1 = g a, _2 = g b })
                        (fMonoidal.map (g a) (g b))
                        (gMonoidal.map a b)
                    )
              , identity =
                    λ(a : cObject)
                  → λ(fn : c.arrow { _1 = c.identity, _2 = a })
                  → fMonoidal.identity
                    (g a)
                    (λ(_ : d.identity) → gMonoidal.identity a fn)
              , op =
                    λ(i : cObject)
                  → λ ( day
                      : Day
                        { _1 =
                            Compose { _1 = f, _2 = g }
                        , _2 =
                            Compose { _1 = f, _2 = g }
                        }
                        i
                      )
                  → day
                    (f (g i))
                    (   λ(b : { _1 : cObject, _2 : cObject })
                      → λ(fn : c.arrow { _1 = c.op b, _2 = i })
                      → λ(a : { _1 : f (g b._1), _2 : f (g b._2) })
                      → fMonoidal.op
                        (g i)
                        (   λ(fr : eObject)
                          → λ(fDay : Day/convolution dObject e d f f (g i) fr)
                          → fDay
                            { _1 = g b._1, _2 = g b._2 }
                            (   λ(p : { _1 : g b._1, _2 : g b._2 })
                              → gMonoidal.op
                                i
                                (   λ(gr : dObject)
                                  → λ ( gDay
                                      : Day/convolution cObject d c g g i gr
                                      )
                                  → gDay b fn p
                                )
                            )
                            a
                        )
                    )
              }
            : MonoidalFunctor cObject v c e (Compose { _1 = f, _2 = g })
