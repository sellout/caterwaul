{- This doesn’t use `extractSemigroupal` because I don’t know how to apply the
  `morphism` in the monoidal category instance.
-}
let kArrow =
      ./../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../../Category/Monoidal/Kind sha256:f05d8665b46c686b6b930ad18aad6e1daa8c7a9c104d7bbeec947389d4d83e48
          kArrow
          kProduct
          Type
          vObject
        )
    → λ ( cat
        : ./../Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
          kArrow
          kProduct
          vObject
          object
        )
    → let profunctor =
            kArrow (kProduct object object) vObject
      
      in    { constraint =
                ./../../Functor/Profunctor/Type sha256:b49ae06477f88b9ef50357cd60262da0bbe266d8af1cbe3c5a6b8d6cee32df44
                object
                object
                v
                cat
                cat
            , arrow =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → ∀(a : { _1 : object, _2 : object }) → p._1 a → p._2 a
            , op =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → λ(a : { _1 : object, _2 : object })
                →   ∀(r : Type)
                  → (   ∀(z : object)
                      → p._1 { _1 = z, _2 = a._2 }
                      → p._2 { _1 = a._1, _2 = z }
                      → r
                    )
                  → r
            }
          : ./../Semigroupal/Kind sha256:c397273f09d2bc88d7fb86edfcdc776644a7d9ad34ecd55177bd834e624af11e
            kArrow
            kProduct
            vObject
            profunctor
