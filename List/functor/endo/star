let kArrow = ./../../../Function/Kind

let object = Type

let cat = ./../../../Category/Set/monoidal/cartesian

in    λ(m : kArrow object object)
    → λ(monoidal : ./../../../Functor/Monoidal/Type object cat cat m)
    →   { map =
              λ(a : object)
            → λ(b : object)
            → λ(f : cat.arrow { _1 = a, _2 = m b })
            → λ(fa : List a)
            → let liftCons =
                      λ(mb : m b)
                    → λ(mlb : m (List b))
                    → monoidal.op
                      (List b)
                      (   λ(r : Type)
                        → λ ( day
                            : ./../../../Day/convolution
                              object
                              cat
                              cat
                              m
                              m
                              (List b)
                              r
                            )
                        → day
                          { _1 = b, _2 = List b }
                          (λ(p : { _1 : b, _2 : List b }) → [ p._1 ] # p._2)
                          { _1 = mb, _2 = mlb }
                      )
              
              in  List/fold
                  a
                  fa
                  (m (List b))
                  (λ(x : a) → liftCons (f x))
                  ( monoidal.identity
                    (List b)
                    (λ(_ : cat.identity) → [] : List b)
                  )
        }
      : ./../../../Functor/Endo/Star/Type object cat.arrow m List
