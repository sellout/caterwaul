let kArrow = ./../../../Function/Kind

let object = Type

let cat = ./../../../Category/Set/monoidal/cartesian

in    λ(m : kArrow object object)
    → λ(monoidal : ./../../../Functor/Monoidal/Type object cat cat m)
    → λ(a : object)
    →   { map =
              λ(b : object)
            → λ(c : object)
            → λ(f : cat.arrow { _1 = b, _2 = m c })
            → ( ./../pair
                m
                ( ./../../../Functor/Monoidal/extractFunctor
                  object
                  cat
                  cat
                  m
                  monoidal
                )
              ).map
              { _1 = a, _2 = b }
              { _1 = a, _2 = c }
              { _1 =
                  λ(x : a) → monoidal.identity a (λ(_ : cat.identity) → x)
              , _2 =
                  f
              }
        }
      : ./../../../Functor/Endo/Star/Type
        object
        cat.arrow
        m
        (λ(b : Type) → ./../../Type { _1 = a, _2 = b })
