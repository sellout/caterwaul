let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(vObject : Kind)
    → λ(object : Kind)
    → λ(cat : ./../Monoidal/Kind kArrow kProduct vObject object)
    →     { identity = cat.identity }
        ∧ ./semigroupal
          vObject
          object
          (./../Monoidal/extractSemigroupal kArrow kProduct vObject object cat)
      : ./../Monoidal/Kind kArrow kProduct vObject object
