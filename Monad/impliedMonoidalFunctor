let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let base =
      ./../Category/Monoidal/extractCategory sha256:f8fd8dd2ec93dac14e091587db11696f084c1d8eb9de88b71b625151904db9ff
      kArrow
      kProduct

let vObject = Type

let v =
      base
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:b017581ee66eec1995d52c80d527598dd5614254bf7217768c035c3a5e2103bd

let object = Type

let cat =
      ./../Category/Set/monoidal/cartesian sha256:b017581ee66eec1995d52c80d527598dd5614254bf7217768c035c3a5e2103bd

in    λ ( f
        : kArrow object object
        )
    → λ ( functor
        : ./../Functor/Endo/Type sha256:f7141343200ccaa9a1f80d06732e331624a3edd9e92b9ec3153db87c468fafe3
          vObject
          object
          v
          (base vObject object cat)
          f
        )
    → λ ( monad
        : ./Type sha256:081e7d7d11c47a6170ed19e4593cc9f55600302a7aa5128a643f5e56c890eb05
          object
          (base vObject object cat)
          f
        )
    →   { map =
            functor.map
        , identity =
              λ(a : object)
            → λ(fn : cat.arrow { _1 = cat.identity, _2 = a })
            → monad.identity a (fn {=})
        , op =
              λ ( i
                : object
                )
            → λ ( day
                :   ∀ ( r
                      : Type
                      )
                  → ./../Day/convolution sha256:e9cc6113ab1965750eabb0f553e45e3818548a78755967d465d6f3082e674913
                    object
                    cat
                    cat
                    f
                    f
                    i
                    r
                  → r
                )
            → day
              (f i)
              (   λ(b : { _1 : object, _2 : object })
                → λ(fn : cat.arrow { _1 = cat.op b, _2 = i })
                → λ(d : { _1 : f b._1, _2 : f b._2 })
                → monad.op
                  i
                  ( functor.map
                    (cat.arrow { _1 = b._2, _2 = i })
                    (f i)
                    (   λ(fn : cat.arrow { _1 = b._2, _2 = i })
                      → functor.map b._2 i fn d._2
                    )
                    ( functor.map
                      b._1
                      (cat.arrow { _1 = b._2, _2 = i })
                      (λ(x : b._1) → λ(y : b._2) → fn { _1 = x, _2 = y })
                      d._1
                    )
                  )
              )
        }
      : ./../Functor/Monoidal/Type sha256:3fd0a2398dd1d3c0cb029ce034f09d4c1b6f51e622139f06ad1086ceea926567
        object
        v
        cat
        cat
        f
