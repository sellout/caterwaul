let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(cSemigroupoid : ./../../Semigroupoid/Type cObject cArrow)
    → let dObject = Type
      
      let dArrow = ./../../Function/Type
      
      in    λ(f : kArrow cObject dObject)
          →   ./../../Ran/functor
              cObject
              cObject
              cArrow
              cSemigroupoid
              (./../../Identity/Type cObject)
              f
            : ./../../Functor/Type
              cObject
              dObject
              cArrow
              dArrow
              (./../Type cObject cArrow f)
