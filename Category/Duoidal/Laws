let kCat =
      ./../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./Kind sha256:9093c6472bbfa0939a07b1d0896b7856410c84b4e55175dce8978baf8ff28b07
          kCat
          vObject
          object
        )
    → let additive =
            ./extractAdditive sha256:5e68260653c471df3977a657c811c8ca7f0317e379bcd90886917b0f2ec52f2b
            kCat
            vObject
            object
            cat
      
      let multiplicative =
            ./extractMultiplicative sha256:fcce2925fbebe635a50151f4cd5e00b0807811c62395c6fa5c8a87a40b229f32
            kCat
            vObject
            object
            cat
      
      in  { swap :
                ∀(a : object)
              → ∀(b : object)
              → ∀(c : object)
              → ∀(d : object)
              → cat.arrow
                { _1 =
                    additive.product
                    { _1 =
                        multiplicative.product { _1 = a, _2 = b }
                    , _2 =
                        multiplicative.product { _1 = c, _2 = d }
                    }
                , _2 =
                    multiplicative.product
                    { _1 =
                        additive.product { _1 = a, _2 = c }
                    , _2 =
                        additive.product { _1 = b, _2 = d }
                    }
                }
          , split :
              cat.arrow
              { _1 =
                  additive.identity
              , _2 =
                  multiplicative.product
                  { _1 = additive.identity, _2 = additive.identity }
              }
          , combine :
              cat.arrow
              { _1 =
                  additive.product
                  { _1 = multiplicative.identity, _2 = multiplicative.identity }
              , _2 =
                  multiplicative.identity
              }
          , switch :
              cat.arrow { _1 = additive.identity, _2 = multiplicative.identity }
          , additive :
              ./../Monoidal/Laws sha256:9c4494b45285d0d1a961b74a896ffc20009a3020d9b5b84a5b47ba22cb09c97e
              object
              additive
          , multiplicative :
              ./../Monoidal/Laws sha256:9c4494b45285d0d1a961b74a896ffc20009a3020d9b5b84a5b47ba22cb09c97e
              object
              multiplicative
          }
