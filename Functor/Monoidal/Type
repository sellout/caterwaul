let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

let MonoidalCategory = ./../../Category/Monoidal/Kind kArrow kProduct vObject

in    λ(cObject : Kind)
    → λ(v : ./../../Category/Kind kArrow kProduct Type vObject)
    → λ(c : MonoidalCategory cObject)
    → let dObject = Type
      
      in    λ(d : MonoidalCategory dObject)
          → λ(f : kArrow cObject dObject)
          → let base =
                  ./../../Category/Monoidal/extractCategory
                  kArrow
                  kProduct
                  vObject
            
            in    ./../Type
                  vObject
                  cObject
                  dObject
                  v
                  (base cObject c)
                  (base dObject d)
                  f
                ⩓ ./../../Monoid/Type
                  (kArrow cObject dObject)
                  (./../../Category/Functor/monoidal cObject v c d)
                  f
