let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let Set =
      ./../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

let base =
      ./../Category/Monoidal/Cartesian/extractCategory sha256:fe359f472fbc38300f29f9f50522e2e23d0bb16034bc98c93265a1f5aeb01349
      cat
      vObject
      Type
      Set

in    λ ( s
        : Type
        )
    →   { unit =
            λ(a : Type) → λ(x : a) → λ(y : s) → { _1 = y, _2 = x }
        , counit =
            λ(a : Type) → λ(x : { _1 : s, _2 : s → a }) → x._2 x._1
        , leftAdjunct =
              λ(a : Type)
            → λ(b : Type)
            → λ(f : { _1 : s, _2 : a } → b)
            → λ(x : a)
            → λ(y : s)
            → f { _1 = y, _2 = x }
        , rightAdjunct =
              λ(a : Type)
            → λ(b : Type)
            → λ(f : a → s → b)
            → λ(t : { _1 : s, _2 : a })
            → f t._2 t._1
        }
      : ./../Adjunction/Type sha256:9f462ba882ff165dc54ad4130625161af51d1df5530cfc925150f18ba4f24f25
        Type
        Type
        base
        base
        (λ(a : Type) → Set.op { _1 = s, _2 = a })
        (λ(a : Type) → Set.arrow { _1 = s, _2 = a })
