let cat = ./../Category/Cat/semigroupal

let vObject = Type

let Set = ./../Category/Set/rig

in    λ(a : Type)
    →   { unit =
            λ(b : Type) → λ(x : b) → < Right = x | Left : a >
        , product =
              λ(b : Type)
            → λ ( fa
                : Set.additive.product
                  { _1 = a, _2 = Set.additive.product { _1 = a, _2 = b } }
                )
            → merge
              { Left =
                  λ(l : a) → < Left = l | Right : b >
              , Right =
                  λ(e : < Left : a | Right : b >) → e
              }
              ( merge
                { Left =
                      λ(x : a)
                    → < Left =
                          x
                      | Right :
                          Set.additive.product { _1 = a, _2 = b }
                      >
                , Right =
                      λ(x : Set.additive.product { _1 = a, _2 = b })
                    → < Right = x | Left : a >
                }
                fa
              )
        }
      : ./../Monad/Type
        Type
        ( ./../Category/Monoidal/Cartesian/extractCategory
          cat
          vObject
          Type
          ./../Category/Set/monoidal/cartesian
        )
        (λ(b : Type) → Set.additive.product { _1 = a, _2 = b })
