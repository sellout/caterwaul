let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → let profunctor = kArrow (kProduct object object) vObject
      
      in  ./../Semigroup/Type
          profunctor
          (./../Category/Profunctor/semigroupal object v cat)
