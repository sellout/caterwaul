let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

let MonoidalCategory = ./../../Category/Monoidal/Kind kArrow kProduct vObject

in    λ(cObject : Kind)
    → λ(v : ./../../Category/Kind kArrow kProduct Type vObject)
    → λ(c : MonoidalCategory cObject)
    → let dObject = Type
      
      in    λ(d : MonoidalCategory dObject)
          → λ(f : kArrow cObject dObject)
          → λ(monoidal : ./Type cObject v c d f)
          →   monoidal.{ identity, op }
            : ./../../Monoid/Type
              (kArrow cObject dObject)
              (./../../Category/Functor/monoidal cObject v c d)
              f
