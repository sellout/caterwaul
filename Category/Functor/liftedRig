{- For any rig category ùíû, any ùíû-valued functor category is a rig category in
   the same way by ‚Äúlifting‚Äù the rig structure of ùíû.
-}
let cat =
      ./../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let Category =
      ./../Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
      cat

let RigCategory =
      ./../Rig/Kind sha256:f81dfc0c5d6068531dea30420720beec80a7cd1d0481cfb44fc9fecb3c35611a
      cat

in    Œª ( cObject
        : Kind
        )
    ‚Üí let dObject =
            Type
      
      in    Œª ( v
              : Category Type vObject
              )
          ‚Üí Œª(c : Category vObject cObject)
          ‚Üí Œª(d : RigCategory vObject dObject)
          ‚Üí let base =
                  ./../Rig/extractCategory sha256:7c0bcbd29731e19cbfd3c760c60f9e54eb85815bee92a9580f97899825951d88
                  cat
                  vObject
            
            let object = cat.arrow cObject dObject
            
            in      { additive =
                        { unit =
                              Œª ( x
                                : cObject
                                )
                            ‚Üí ./../../Const/Type sha256:d0d255964e7701c8f9aa67f01b9f97dac9fbbda16e9c326faa48cddc1cf63740
                              dObject
                              cObject
                              { _1 = d.additive.unit, _2 = x }
                        , product =
                              Œª(f : { _1 : object, _2 : object })
                            ‚Üí Œª(x : cObject)
                            ‚Üí d.additive.product { _1 = f._1 x, _2 = f._2 x }
                        }
                    , multiplicative =
                        { unit =
                              Œª ( x
                                : cObject
                                )
                            ‚Üí ./../../Const/Type sha256:d0d255964e7701c8f9aa67f01b9f97dac9fbbda16e9c326faa48cddc1cf63740
                              dObject
                              cObject
                              { _1 = d.multiplicative.unit, _2 = x }
                        , product =
                              Œª(f : { _1 : object, _2 : object })
                            ‚Üí Œª(x : cObject)
                            ‚Üí d.multiplicative.product
                              { _1 = f._1 x, _2 = f._2 x }
                        }
                    }
                  ‚àß ./category sha256:c69163eac75892504c9b6fd8b9637704c20e0baa23c5d428ecfb2b4587414bef
                    cObject
                    dObject
                    v
                    c
                    (base dObject d)
                : RigCategory vObject object
