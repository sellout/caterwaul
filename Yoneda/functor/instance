let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let base = ./../../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = ./../../Category/Set/monoidal/cartesian

let vBase = base Type vObject v

in    λ(cObject : Kind)
    → λ(c : ./../../Category/Kind kArrow kProduct vObject cObject)
    → λ(cSemigroupoid : ./../../Semigroupoid/Type cObject v c c.arrow)
    → let dObject = Type
      
      let d = base vObject dObject ./../../Category/Set/monoidal/cartesian
      
      in    λ(f : kArrow cObject dObject)
          →   ./../../Ran/functor
              cObject
              cObject
              c
              cSemigroupoid
              (./../../Identity/Type cObject)
              f
            : ./../../Functor/Type
              vObject
              cObject
              dObject
              vBase
              c
              d
              (./../Type cObject c f)
