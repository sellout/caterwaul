let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → λ(category : ./../Category/Type object v cat)
    →   { monoid =
            ./monad object cat category
        , comonoid =
            ./monad
            object
            (./../Category/Op/Kind vObject object cat)
            (./../Category/Op/category object v cat category)
        }
      : ./../Bimonad/Type
        object
        (./../Category/Monoidal/extractCategory kArrow kProduct Type vObject v)
        cat
        (./Type object)
