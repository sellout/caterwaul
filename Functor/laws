let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → let dObject = Type
      
      in    λ(c : ./../Category/Kind kArrow kProduct cObject)
          → λ(cCategory : ./../Category/Type cObject c.arrow)
          → let dArrow = ./../Function/Type
            
            let dCategory = ./../Function/category
            
            in    λ(f : kArrow cObject dObject)
                → λ(functor : ./Type cObject dObject c.arrow dArrow f)
                → { identity =
                        λ(a : cObject)
                      → λ(eq : ./../Eq/Type (f a))
                      → ./../Eq/eqfn
                        (f a)
                        (f a)
                        eq
                        (functor.map a a (cCategory.identity a))
                        (dCategory.identity (f a))
                  , composition =
                        λ(a : cObject)
                      → λ(b : cObject)
                      → λ(e : cObject)
                      → λ(eq : ./../Eq/Type (f e))
                      → λ(fn : c.arrow { _1 = b, _2 = e })
                      → λ(gn : c.arrow { _1 = a, _2 = b })
                      → ./../Eq/eqfn
                        (f a)
                        (f e)
                        eq
                        ( functor.map
                          a
                          e
                          ( cCategory.op
                            { _1 = a, _2 = e }
                            (   λ(r : Type)
                              → λ ( arrowsOut
                                  :   ∀(z : cObject)
                                    → c.arrow { _1 = z, _2 = e }
                                    → c.arrow { _1 = a, _2 = z }
                                    → r
                                  )
                              → arrowsOut b fn gn
                            )
                          )
                        )
                        ( dCategory.op
                          { _1 = f a, _2 = f e }
                          (   λ(r : Type)
                            → λ ( arrowsOut
                                :   ∀(z : dObject)
                                  → dArrow { _1 = z, _2 = f e }
                                  → dArrow { _1 = f a, _2 = z }
                                  → r
                                )
                            → arrowsOut
                              (f b)
                              (functor.map b e fn)
                              (functor.map a b gn)
                          )
                        )
                  }
