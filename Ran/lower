let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let base = ./../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = base Type vObject ./../Category/Set/monoidal/cartesian

let cObject = Type

let cpObject = Type

let dObject = Type

let c = ./../Category/Set/monoidal/cartesian

let cp = ./../Category/Set/monoidal/cartesian

in    λ(p : kArrow cObject cpObject)
    → λ(monoidal : ./../Functor/Monoidal/Type cObject v c cp p)
    → λ(f : kArrow cObject dObject)
    → λ(a : cpObject)
    → λ(ran : ./Type cObject cpObject (base vObject cpObject cp) p f a)
    → ran a (λ(x : a) → monoidal.identity a (λ(_ : c.identity) → x))
