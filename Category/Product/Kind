let kArrow = ./../../function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

let Category = ./../Kind kArrow kProduct vObject

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(c : Category cObject)
    → λ(d : Category dObject)
    → let object = { _1 : cObject, _2 : dObject }
      
      in    { constraint =
                  λ(x : object)
                → { _1 : c.constraint x._1, _2 : d.constraint x._2 }
            , arrow =
                  λ(a : { _1 : object, _2 : object })
                → { _1 :
                      c.arrow { _1 = a._1._1, _2 = a._2._1 }
                  , _2 :
                      d.arrow { _1 = a._1._2, _2 = a._2._2 }
                  }
            }
          : Category object
