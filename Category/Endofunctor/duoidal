{- NB: This is defined in terms of the monoidal categories instead of the other
       way around because this is more restrictive than either monoidal
       category.
     • Applicative requires that the target category is **Set** and
     • monadic requires an endofunctor`object`.
       When you combine these two restrictions, you end up only being able to
       support endofunctors in **Set**.
-}
let kCat =
      ./../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let object = Type

in    λ ( v
        : ./../../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          kCat
          Type
          vObject
        )
    → λ ( cat
        : ./../../Category/Monoidal/Kind sha256:8e77a076f4c2f6e1d0ad07cfec37dfd04782e1a0a7e98a72a305233f69c494ca
          kCat
          vObject
          object
        )
    → let applicative =
            ./../Functor/monoidal sha256:39d41f6d15acd3f5a9bc7e934e1c6e961f57972b888f43d4ddf17fa894e65b4e
            object
            v
            cat
            cat
      
      let monadic =
            ./monoidal/monadic sha256:0e31b0338ba25f45a71547b40e327574afead7e8fdc0d1825e4a29e33b3734b4
            object
            v
            ( ./../../Category/Monoidal/extractCategory sha256:c9807a603a6bd9f0ef13debb0f11e63d6f7133870fef175f27d08dd81c2ff695
              kCat
              vObject
              object
              cat
            )
      
      in    { constraint =
                monadic.constraint
            , arrow =
                applicative.arrow
            , additive =
                { unit = applicative.unit, product = applicative.product }
            , multiplicative =
                { unit = monadic.unit, product = monadic.product }
            }
          : ./../Duoidal/Kind sha256:f81dfc0c5d6068531dea30420720beec80a7cd1d0481cfb44fc9fecb3c35611a
            kCat
            vObject
            (kCat.arrow object object)
