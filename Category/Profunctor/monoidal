let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Kind kArrow kProduct vObject object)
    → let profunctor = kArrow (kProduct object object) vObject
      
      in    λ(morphism : profunctor)
          →   { identity = morphism } ∧ ./semigroupal object v cat
            : ./../Monoidal/Kind kArrow kProduct vObject profunctor
