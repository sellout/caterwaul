{- In a Leibniz category, identity is refl, and op is transitivity. -}
let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( cObject
        : Kind
        )
    → λ(dObject : Kind)
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:6eb37e632903173c5ec1600564aa614697c4b58719773c4e4c66a76f095d1636
          cat
          Type
          vObject
        )
    → λ ( c
        : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          vObject
          cObject
        )
    → λ ( d
        : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          vObject
          dObject
        )
    → λ ( dCategory
        : ./../Category/Type sha256:5792bd3a482ad0d318aecda464bd952a6561dc1119bdc1f5db574cfc3b66e095
          dObject
          v
          d
        )
    → let Leibniz =
            ./Kind sha256:a5b66002e6e42543925c88fc6fc8d6b528eda12277cc998a0cc254be408ae193
            cObject
            dObject
            c
            d
      
      in    { identity =
                  λ(a : cObject)
                → { subst =
                        λ(f : cat.arrow cObject dObject)
                      → dCategory.identity (f a)
                  }
            , op =
                  λ(a : { _1 : cObject, _2 : cObject })
                → λ ( p
                    :   ∀(r : Type)
                      → (   ∀(z : cObject)
                          → Leibniz.arrow { _1 = z, _2 = a._2 }
                          → Leibniz.arrow { _1 = a._1, _2 = z }
                          → r
                        )
                      → r
                    )
                → { subst =
                        λ(f : cat.arrow cObject dObject)
                      → dCategory.op
                        { _1 = f a._1, _2 = f a._2 }
                        (   λ(r : Type)
                          → λ ( arrowsOut
                              :   ∀(z : dObject)
                                → d.arrow { _1 = z, _2 = f a._2 }
                                → d.arrow { _1 = f a._1, _2 = z }
                                → r
                              )
                          → p
                            r
                            (   λ(z : cObject)
                              → λ(g : Leibniz.arrow { _1 = z, _2 = a._2 })
                              → λ(h : Leibniz.arrow { _1 = a._1, _2 = z })
                              → arrowsOut (f z) (g.subst f) (h.subst f)
                            )
                        )
                  }
            }
          : ./../Category/Type sha256:5792bd3a482ad0d318aecda464bd952a6561dc1119bdc1f5db574cfc3b66e095
            cObject
            v
            Leibniz
