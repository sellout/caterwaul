let kArrow = ./../Function/Kind

let object = Type

let arrow = ./../Function/Type

in    λ(category : ./../Category/Type object arrow)
    → let Codensity = ./Type object arrow
      
      in    λ(m : kArrow object object)
          →   { identity =
                    λ(a : object)
                  → λ(x : a)
                  → λ(b : object)
                  → λ(k : arrow { _1 = a, _2 = m b })
                  → k x
              , op =
                    λ(a : object)
                  → λ(codensity : Codensity m (Codensity m a))
                  → λ(c : object)
                  → λ(l : arrow { _1 = a, _2 = m c })
                  → codensity
                    c
                    (   λ(x : Codensity m a)
                      → category.identity (Codensity m a) x c l
                    )
              }
            : ./../Monad/Type object arrow (Codensity m)
