let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Semigroupal/Kind kArrow kProduct vObject object)
    → λ(arrow : ./Type object v cat)
    →   arrow.{ op }
      : ./../Semigroupoid/Type
        object
        v
        ( ./../Category/Semigroupal/extractCategory
          kArrow
          kProduct
          vObject
          object
          cat
        )
        cat.arrow
