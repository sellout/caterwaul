{- A profunctor `C ↛ D` is represented as the bifunctor `(D^op, C) → Set`. This
   is much more general than Haskell’s `Profunctor`. See `Hom` and `InternalHom`
   for that.
-}
let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → ./../Bifunctor/Type
      dObject
      cObject
      Type
      (./../../Category/Op/Type dObject dArrow)
      cArrow
      ./../../Function/Type
