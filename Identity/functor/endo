let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(vObject : Kind)
    → λ(object : Kind)
    → λ(v : ./../../Category/Kind kArrow kProduct Type vObject)
    → λ ( vCategory
        : ./../../Category/Type
          vObject
          ./../../Category/Set/monoidal/cartesian
          v
        )
    → λ(cat : ./../../Category/Kind kArrow kProduct vObject object)
    →   { map =
              λ(a : object)
            → λ(b : object)
            → vCategory.identity (cat.arrow { _1 = a, _2 = b })
        }
      : ./../../Functor/Endo/Type vObject object v cat (./../Type object)
