let kArrow = ./../../../Function/Kind

let kProduct = ./../../../Tuple/Kind

let base = ./../../../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = base Type vObject ./../../../Category/Set/monoidal/cartesian

let object = Type

let Set = ./../../../Category/Set/rig

let cat =
      ./../../../Category/Rig/extractMultiplicative
      kArrow
      kProduct
      vObject
      object
      Set

in    λ(m : kArrow object object)
    → λ(monoidal : ./../../../Functor/Monoidal/Type object v cat cat m)
    → λ(a : object)
    →   { map =
              λ(b : object)
            → λ(c : object)
            → λ(f : cat.arrow { _1 = b, _2 = m c })
            → ( ./../pair
                m
                ( ./../../../Functor/Monoidal/extractFunctor
                  object
                  v
                  cat
                  cat
                  m
                  monoidal
                )
              ).map
              { _1 = a, _2 = b }
              { _1 = a, _2 = c }
              { _1 =
                  λ(x : a) → monoidal.identity a (λ(_ : cat.identity) → x)
              , _2 =
                  f
              }
        }
      : ./../../../Functor/Endo/Star/Type
        vObject
        object
        v
        (base vObject object cat)
        m
        (λ(b : object) → Set.additive.op { _1 = a, _2 = b })
