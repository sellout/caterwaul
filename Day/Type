let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(c : ./../Category/Monoidal/Kind kArrow kProduct cObject)
    → let vObject = Type
      
      in    λ(v : ./../Category/Monoidal/Kind kArrow kProduct vObject)
          →   (   λ ( f
                    : { _1 :
                          kArrow cObject vObject
                      , _2 :
                          kArrow cObject vObject
                      }
                    )
                → ./../Lan/Type
                  { _1 : cObject, _2 : cObject }
                  cObject
                  c.arrow
                  c.op
                  (   λ(p : { _1 : cObject, _2 : cObject })
                    → v.op { _1 = f._1 p._1, _2 = f._2 p._2 }
                  )
              )
            : kArrow
              (kProduct (kArrow cObject vObject) (kArrow cObject vObject))
              (kArrow cObject vObject)
