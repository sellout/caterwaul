{- NB: This doesn’t use `Duoidal/extractMultiplicative` because that has a fixed
      `object`.
-}
let kCat =
      ./../../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let Category =
      ./../../Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
      kCat

let Endofunctor =
      ./../../../Functor/Endo/Type sha256:158c6ae27571d27adefd3b94b6b9ce3ed48e1130d406ec72c62ccadcf931dcd0

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ(v : Category Type vObject)
    → λ(cat : Category vObject object)
    →   { constraint =
            Endofunctor vObject object v cat
        , arrow =
            ./../../../NaturalTransformation/Type sha256:ae103806c5d0da8f35ba65b9c08afdcc86ed1d5d71eb2ed4a0d631119df51bbc
            object
            object
            cat
        , unit =
            ./../../../Identity/Type sha256:0d22fa254c96551228894f2adaedd4f45c0401759d18775e412ae41694f1d3e0
            object
        , product =
            ./../../../Compose/Type sha256:e830545569ce8ba04d3124a7ca93994fc93e18c0372616f45910253f0a00907d
            object
            object
            object
        }
      : ./../../Monoidal/Kind sha256:8e77a076f4c2f6e1d0ad07cfec37dfd04782e1a0a7e98a72a305233f69c494ca
        kCat
        vObject
        (kCat.arrow object object)
