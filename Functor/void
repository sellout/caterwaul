let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v =
      ./../Category/Monoidal/extractCategory
      kArrow
      kProduct
      Type
      vObject
      ./../Category/Set/monoidal/cartesian

let cObject = Type

let c = ./../Category/Set/monoidal/cartesian

in    λ(dObject : Kind)
    → λ(d : ./../Category/Kind kArrow kProduct vObject dObject)
    → λ(f : kArrow cObject dObject)
    → λ ( functor
        : ./Type
          vObject
          cObject
          dObject
          v
          ( ./../Category/Monoidal/extractCategory
            kArrow
            kProduct
            vObject
            cObject
            c
          )
          d
          f
        )
    → λ(a : cObject)
    → functor.map a c.identity (λ(_ : a) → {=})
