{- A profunctor `C ↛ D` is represented as the bifunctor `(D^op, C) → Set`. This
   is much more general than Haskell’s `Profunctor`. See `Hom` and `InternalHom`
   for that.
-}
let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let Category = ./../../Category/Kind kArrow kProduct

let vObject = Type

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(v : ./../../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(c : Category vObject cObject)
    → λ(d : Category vObject dObject)
    → ./../Bifunctor/Type
      vObject
      dObject
      cObject
      vObject
      v
      (./../../Category/Op/Kind vObject dObject d)
      c
      (./../../Category/Monoidal/extractCategory kArrow kProduct Type vObject v)
