let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let vObject = Type

let v =
      ./../Category/Set/monoidal/cartesian sha256:b017581ee66eec1995d52c80d527598dd5614254bf7217768c035c3a5e2103bd

in    λ ( cObject
        : Kind
        )
    → let dObject =
            Type
      
      in    λ ( c
              : ./../Category/Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
                kArrow
                kProduct
                vObject
                cObject
              )
          → λ ( cCategory
              : ./../Category/Type sha256:b5245b1f92f65f1b72bbfac6c53ebc19dc3c778b775b19ea4ad73fa6d2569dcb
                cObject
                v
                c
              )
          → let d =
                  ./../Category/Monoidal/extractCategory sha256:f8fd8dd2ec93dac14e091587db11696f084c1d8eb9de88b71b625151904db9ff
                  kArrow
                  kProduct
                  vObject
                  dObject
                  ./../Category/Set/monoidal/cartesian sha256:b017581ee66eec1995d52c80d527598dd5614254bf7217768c035c3a5e2103bd
            
            let dCategory =
                  ./../Category/Set/category sha256:de245a327ab65ee050d8adfe6271621e83ceced0333a799c37bef940a119696f
            
            in    λ ( f
                    : kArrow cObject dObject
                    )
                → λ ( functor
                    : ./Type sha256:9222d1a669a235e545d7d24bc2845509339fb9f17711afef958df74457784d4d
                      vObject
                      cObject
                      dObject
                      ( ./../Category/Monoidal/extractCategory sha256:f8fd8dd2ec93dac14e091587db11696f084c1d8eb9de88b71b625151904db9ff
                        kArrow
                        kProduct
                        Type
                        vObject
                        v
                      )
                      c
                      d
                      f
                    )
                → { identity =
                        λ ( a
                          : cObject
                          )
                      → λ ( eq
                          : ./../Eq/Type sha256:6084124c32c2894f3ef6aff7f8762769b309face3a6b507b3cd1108d2fa6b179
                            (f a)
                          )
                      → ./../Eq/eqfn sha256:bb163ff96681a81d7d9d5704f56225a7aee6bd14976ae8a3c1bb945772b2085c
                        (f a)
                        (f a)
                        eq
                        (functor.map a a (cCategory.identity a))
                        (dCategory.identity (f a))
                  , composition =
                        λ ( a
                          : cObject
                          )
                      → λ(b : cObject)
                      → λ(e : cObject)
                      → λ ( eq
                          : ./../Eq/Type sha256:6084124c32c2894f3ef6aff7f8762769b309face3a6b507b3cd1108d2fa6b179
                            (f e)
                          )
                      → λ(fn : c.arrow { _1 = b, _2 = e })
                      → λ(gn : c.arrow { _1 = a, _2 = b })
                      → ./../Eq/eqfn sha256:bb163ff96681a81d7d9d5704f56225a7aee6bd14976ae8a3c1bb945772b2085c
                        (f a)
                        (f e)
                        eq
                        ( functor.map
                          a
                          e
                          ( cCategory.op
                            { _1 = a, _2 = e }
                            (   λ(r : Type)
                              → λ ( arrowsOut
                                  :   ∀(z : cObject)
                                    → c.arrow { _1 = z, _2 = e }
                                    → c.arrow { _1 = a, _2 = z }
                                    → r
                                  )
                              → arrowsOut b fn gn
                            )
                          )
                        )
                        ( dCategory.op
                          { _1 = f a, _2 = f e }
                          (   λ(r : Type)
                            → λ ( arrowsOut
                                :   ∀(z : dObject)
                                  → d.arrow { _1 = z, _2 = f e }
                                  → d.arrow { _1 = f a, _2 = z }
                                  → r
                                )
                            → arrowsOut
                              (f b)
                              (functor.map b e fn)
                              (functor.map a b gn)
                          )
                        )
                  }
