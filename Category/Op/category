let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Kind kArrow kProduct vObject object)
    → λ(category : ./../Type object v cat)
    → let Op = ./Kind vObject object cat
      
      in    { identity =
                category.identity
            , op =
                  λ(a : { _1 : object, _2 : object })
                → λ ( p
                    :   ∀(r : Type)
                      → (   ∀(z : object)
                          → Op.arrow { _1 = z, _2 = a._2 }
                          → Op.arrow { _1 = a._1, _2 = z }
                          → r
                        )
                      → r
                    )
                → category.op
                  { _1 = a._2, _2 = a._1 }
                  (   λ(r : Type)
                    → λ ( arrowsOut
                        :   ∀(z : object)
                          → cat.arrow { _1 = z, _2 = a._1 }
                          → cat.arrow { _1 = a._2, _2 = z }
                          → r
                        )
                    → p
                      r
                      (   λ(z : object)
                        → λ(f : Op.arrow { _1 = z, _2 = a._2 })
                        → λ(g : Op.arrow { _1 = a._1, _2 = z })
                        → arrowsOut z g f
                      )
                  )
            }
          : ./../Type object v Op
