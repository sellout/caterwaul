let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let vObject = Type

let v =
      ./Set/monoidal/cartesian sha256:b017581ee66eec1995d52c80d527598dd5614254bf7217768c035c3a5e2103bd

let vBase =
      ./Monoidal/extractCategory sha256:f8fd8dd2ec93dac14e091587db11696f084c1d8eb9de88b71b625151904db9ff
      kArrow
      kProduct
      Type
      vObject
      v

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
          kArrow
          kProduct
          vObject
          object
        )
    → λ ( category
        : ./Type sha256:b5245b1f92f65f1b72bbfac6c53ebc19dc3c778b775b19ea4ad73fa6d2569dcb
          object
          v
          cat
        )
    → λ(c : object)
    →   { map =
              λ(x : object)
            → λ(y : object)
            → λ(fn : cat.arrow { _1 = x, _2 = y })
            → λ(input : cat.arrow { _1 = c, _2 = x })
            → category.op
              { _1 = c, _2 = y }
              (   λ(r : Type)
                → λ ( arrowsOut
                    :   ∀(z : object)
                      → cat.arrow { _1 = z, _2 = y }
                      → cat.arrow { _1 = c, _2 = z }
                      → r
                    )
                → arrowsOut x fn input
              )
        }
      : ./../Functor/Type sha256:9222d1a669a235e545d7d24bc2845509339fb9f17711afef958df74457784d4d
        vObject
        object
        vObject
        vBase
        cat
        vBase
        (λ(x : object) → cat.arrow { _1 = c, _2 = x })
