let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cObject : Kind)
    → λ(c : ./../Category/Kind kArrow kProduct vObject cObject)
    → λ(dObject : Kind)
    → λ(d : ./../Category/Kind kArrow kProduct vObject dObject)
    → λ(f : kArrow (kProduct dObject cObject) Type)
    → λ(strong : ./Type cObject dObject v c d f)
    → strong.{ map } : ./../Functor/Profunctor/Type cObject dObject v c d f
