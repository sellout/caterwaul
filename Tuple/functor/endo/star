let kCat =
      ./../../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let base =
      ./../../../Category/Monoidal/Cartesian/extractCategory sha256:5d481c2c40201add9d14edc5a5ff6471a11fa9c58fea348279927339cfd60456
      kCat

let vObject = Type

let v =
      base
      Type
      vObject
      ./../../../Category/Set/monoidal/cartesian sha256:3a79a17d1c39a3df58efcc62fd96a2da0147bb29b524f57aa7c35942f653f164

let Set =
      ./../../../Category/Set/monoidal/cartesian sha256:3a79a17d1c39a3df58efcc62fd96a2da0147bb29b524f57aa7c35942f653f164

let cat = base vObject Type Set

in    λ ( m
        : kCat.arrow Type Type
        )
    → λ ( functor
        : ./../../../Functor/Endo/Type sha256:158c6ae27571d27adefd3b94b6b9ce3ed48e1130d406ec72c62ccadcf931dcd0
          vObject
          Type
          v
          cat
          m
        )
    → λ(a : Type)
    →   { map =
              λ(b : Type)
            → λ(c : Type)
            → λ(f : b → m c)
            → λ(t : Set.product { _1 = a, _2 = b })
            → functor.map
              c
              (Set.product { _1 = a, _2 = c })
              (λ(x : c) → t ⫽ { _2 = x })
              (f t._2)
        }
      : ./../../../Functor/Endo/Star/Type sha256:fc8ac120351147c630fb970d16a63ab71aaf0db1cef9764f6988f65b318c199a
        vObject
        Type
        v
        cat
        m
        (λ(b : Type) → Set.product { _1 = a, _2 = b })
