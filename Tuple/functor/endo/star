let kArrow = ./../../../Function/Kind

let Tuple = ./../../Type

in    λ(m : kArrow Type Type)
    → λ(functor : ./../../../Functor/Endo/Type Type ./../../../Function/Type m)
    → λ(a : Type)
    →   { map =
              λ(b : Type)
            → λ(c : Type)
            → λ(f : b → m c)
            → λ(t : Tuple { _1 = a, _2 = b })
            → functor.map
              c
              (Tuple { _1 = a, _2 = c })
              (λ(x : c) → t ⫽ { _2 = x })
              (f t._2)
        }
      : ./../../../Functor/Endo/Star/Type
        Type
        ./../../../Function/Type
        m
        (λ(b : Type) → Tuple { _1 = a, _2 = b })
