{- A contravariant functor `C → D` is equivalent to a covariant functor
  `C^op → D`.
-}
let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(vObject : Kind)
    → λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(v : ./../Category/Kind kArrow kProduct Type vObject)
    → λ(c : ./../Category/Kind kArrow kProduct vObject cObject)
    → ./Type vObject cObject dObject v (./../Category/Op/Kind vObject cObject c)
