let kArrow = ./../../../Function/Kind

let kProduct = ./../../../Tuple/Kind

let vObject = Type

let object = Type

in    λ(v : ./../../Kind kArrow kProduct Type vObject)
    → λ(cat : ./../../Monoidal/Kind kArrow kProduct vObject object)
    → ./../../Duoidal/extractAdditive
      kArrow
      kProduct
      vObject
      (kArrow object object)
      (./../duoidal v cat)
