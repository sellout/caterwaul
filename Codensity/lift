let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

in    λ(object : Kind)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → λ(semigroupoid : ./../Semigroupoid/Type object v cat cat.arrow)
    → λ(f : kArrow object object)
    → λ ( functor
        : ./../Functor/Endo/Type
          vObject
          object
          ( ./../Category/Monoidal/extractCategory
            kArrow
            kProduct
            Type
            vObject
            v
          )
          cat
          f
        )
    → λ(monad : ./../Monad/Type object cat f)
    → ./../Ran/lift
      object
      object
      object
      cat
      cat
      semigroupoid
      f
      functor
      f
      f
      monad.op
