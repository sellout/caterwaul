let Either = ./../Type

in    λ(m : Type → Type)
    → λ(functor : ./../../Functor/Endo/Type Type ./../../Function/Type m)
    →   { map =
              λ(a : { _1 : Type, _2 : Type })
            → λ(b : { _1 : Type, _2 : Type })
            → λ(f : { _1 : a._1 → m b._1, _2 : a._2 → m b._2 })
            → λ(e : Either a)
            → let E = Either b
              
              in  merge
                  { Left =
                      λ(x : a._1) → functor.map b._1 (Either b) E.Left (f._1 x)
                  , Right =
                      λ(x : a._2) → functor.map b._2 (Either b) E.Right (f._2 x)
                  }
                  e
        }
      : ./../../Functor/Pair/type
        Type
        (./../../Star/Type Type ./../../Function/Type m)
        Either
