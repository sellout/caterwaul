let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let base =
      ./../Category/Monoidal/Cartesian/extractCategory sha256:fe359f472fbc38300f29f9f50522e2e23d0bb16034bc98c93265a1f5aeb01349
      cat

let vObject = Type

let v =
      base
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

in    λ ( cObject
        : Kind
        )
    → λ(cpObject : Kind)
    → λ ( cp
        : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          vObject
          cpObject
        )
    → let dObject =
            Type
      
      let d =
            base
            vObject
            dObject
            ./../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576
      
      let dSemigroupoid =
            ./../Category/Set/semigroupoid sha256:3b8491b6aa3f60ae83a7ad46b6e13cdda79ae6d2348926fe8815a2549c5b5cc4
      
      in    λ ( h
              : cat.arrow cpObject dObject
              )
          → λ ( functor
              : ./../Functor/Type sha256:bebd999f32d6a3fd9bd7151ca5f0942ed6aeded30809c4a7e6c91382bed2dbcb
                vObject
                cpObject
                dObject
                v
                cp
                d
                h
              )
          → λ(f : cat.arrow cObject cpObject)
          → λ(g : cat.arrow cObject dObject)
          → λ(duplicate : ∀(b : cObject) → d.arrow { _1 = g b, _2 = h (f b) })
          → λ(a : cpObject)
          → λ ( lan
              : ./Type sha256:2edbc6596b56524c06bd7d0f89e30a4a273b5a8a2e53c65c09f2e2ae340891a4
                cObject
                cpObject
                cp
                f
                g
                a
              )
          → lan
            (h a)
            (   λ(b : cObject)
              → λ(k : cp.arrow { _1 = f b, _2 = a })
              → dSemigroupoid.op
                { _1 = g b, _2 = h a }
                (   λ(r : Type)
                  → λ ( arrowsOut
                      :   ∀(z : dObject)
                        → d.arrow { _1 = z, _2 = h a }
                        → d.arrow { _1 = g b, _2 = z }
                        → r
                      )
                  → arrowsOut (h (f b)) (functor.map (f b) a k) (duplicate b)
                )
            )
