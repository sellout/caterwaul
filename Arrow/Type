let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let Category =
      ./../Category/Type sha256:56874495587bd8bf58b702382562e4aed91603b64a2d6893413c72d5bf265596

let Strong =
      ./../Strong/Type sha256:c94a55422f313b4bb76f6c26e9174faf380c821f740e71351b4ad66e0c2a09b3

let Function =
      ./../Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927

in    λ(f : kArrow (kProduct Type Type) Type)
    →   { arr :
            ∀(a : Type) → ∀(b : Type) → (a → b) → f { _1 = a, _2 = b }
        , split :
              ∀(a : Type)
            → ∀(b : Type)
            → ∀(c : Type)
            → ∀(d : Type)
            → f { _1 = a, _2 = b }
            → f { _1 = c, _2 = d }
            → f { _1 = { _1 : a, _2 : c }, _2 = { _1 : b, _2 : d } }
        , fanout :
              ∀(a : Type)
            → ∀(b : Type)
            → ∀(c : Type)
            → f { _1 = a, _2 = b }
            → f { _1 = a, _2 = c }
            → f { _1 = a, _2 = { _1 : b, _2 : c } }
        }
      ⩓ Category Type f
      ⩓ Strong Type Type Function Function f
