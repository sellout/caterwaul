let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

in    λ(object : Kind)
    → λ(cat : ./../Category/Monoidal/Kind kArrow kProduct vObject object)
    → let base =
            ./../Category/Monoidal/extractCategory
            kArrow
            kProduct
            vObject
            object
            cat
      
      in    λ(category : ./../Category/Type object v base)
          → λ ( bifunctor
              : ./../Functor/Bifunctor/Type
                vObject
                object
                object
                object
                v
                base
                base
                base
                cat.op
              )
          → λ(m : object)
          → λ(group : ./Type object cat m)
          → category.op
            { _1 = cat.op { _1 = m, _2 = m }, _2 = m }
            (   λ(r : Type)
              → λ ( arrowsOut
                  :   ∀(z : object)
                    → cat.arrow { _1 = z, _2 = m }
                    → cat.arrow { _1 = cat.op { _1 = m, _2 = m }, _2 = z }
                    → r
                  )
              → arrowsOut
                (cat.op { _1 = m, _2 = m })
                group.op
                ( ( ./../Functor/Bifunctor/impliedFirstFunctor
                    object
                    base
                    object
                    base
                    category
                    object
                    base
                    cat.op
                    bifunctor
                    m
                  ).map
                  m
                  m
                  group.inverse
                )
            )
