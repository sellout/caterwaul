{- Every group in a cartesian category is a Hopf monoid in a unique way. -}
let kArrow =
      ./../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let CartesianCategory =
      ./Type sha256:9f2137c01ea7d329d5171b0e5d8c2f522d95cd7a93711e5e8e4b6dc7d594e04d

let Group =
      ./../../Group/Type sha256:1d2eb52b6091711502e80d646cab25260b08324221c423c04df23b76e600b2c0

let extractMonoid =
      ./../../Group/extractMonoid sha256:43250fa0d527ae8fa554881a0f91783870ffeb02c279dede032649071682b484

let HopfMonoid =
      ./../../Monoid/Hopf/Type sha256:3cced351dcd281ea50a0a5b7f7d4da4f5d00b498c800dabf7d39cd8c85bf6a8e

let MonoidalCategory =
      ./../Monoidal/Kind sha256:f05d8665b46c686b6b930ad18aad6e1daa8c7a9c104d7bbeec947389d4d83e48
      kArrow
      kProduct

let vObject = Type

in    λ(object : Kind)
    → λ(v : MonoidalCategory Type vObject)
    → λ(cat : MonoidalCategory vObject object)
    → λ(m : object)
    → λ(cartesian : CartesianCategory object v cat m)
    → λ(group : Group object cat m)
    →     { antipode = group.inverse }
        ∧ ./impliedBimonoid
          object
          v
          cat
          m
          cartesian
          (extractMonoid object cat m group)
      : HopfMonoid object cat m
