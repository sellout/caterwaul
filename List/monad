let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let Set =
      ./../Category/Monoidal/extractCategory
      kArrow
      kProduct
      vObject
      Type
      ./../Category/Set/monoidal/cartesian

in    { identity =
          λ(a : Type) → λ(x : a) → [ x ]
      , op =
            λ(a : Type)
          → λ(mma : List (List a))
          → List/fold
            (List a)
            mma
            (List a)
            (λ(x : List a) → λ(y : List a) → x # y)
            ([] : List a)
      }
    : ./../Monad/Type Type Set List
