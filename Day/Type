let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(cObject : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(c : ./../Category/Monoidal/Kind kArrow kProduct vObject cObject)
    →   (   λ(f : { _1 : kArrow cObject vObject, _2 : kArrow cObject vObject })
          → ./../Lan/Type
            { _1 : cObject, _2 : cObject }
            cObject
            ( ./../Category/Monoidal/extractCategory
              kArrow
              kProduct
              vObject
              cObject
              c
            )
            c.op
            (   λ(p : { _1 : cObject, _2 : cObject })
              → v.op { _1 = f._1 p._1, _2 = f._2 p._2 }
            )
        )
      : kArrow
        (kProduct (kArrow cObject vObject) (kArrow cObject vObject))
        (kArrow cObject vObject)
