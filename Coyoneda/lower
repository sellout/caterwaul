let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let base = ./../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = base Type vObject ./../Category/Set/monoidal/cartesian

in    λ(cObject : Kind)
    → λ(c : ./../Category/Kind kArrow kProduct vObject cObject)
    → let dObject = Type
      
      let d = base vObject dObject ./../Category/Set/monoidal/cartesian
      
      let dCategory = ./../Category/Set/category
      
      in    λ(f : kArrow cObject dObject)
          → λ(functor : ./../Functor/Type vObject cObject dObject v c d f)
          → ./../Lan/lower
            cObject
            cObject
            c
            f
            functor
            (./../Identity/Type cObject)
            f
            (λ(b : cObject) → dCategory.identity (f b))
