let cat = ./../Category/Cat/semigroupal

let vObject = Type

in    λ(v : ./../Category/Monoidal/Kind cat Type vObject)
    → λ(cObject : Kind)
    → λ(c : ./../Category/Kind cat vObject cObject)
    → λ(dObject : Kind)
    → λ(d : ./../Category/Kind cat vObject dObject)
    → λ(f : cat.arrow (cat.product dObject cObject) Type)
    → λ(strong : ./Type cObject dObject v c d f)
    → strong.{ map } : ./../Functor/Profunctor/Type cObject dObject v c d f
