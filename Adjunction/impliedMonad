let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let Functor =
      ./../Functor/Type sha256:bebd999f32d6a3fd9bd7151ca5f0942ed6aeded30809c4a7e6c91382bed2dbcb

let Adjunction =
      ./Type sha256:9f462ba882ff165dc54ad4130625161af51d1df5530cfc925150f18ba4f24f25

let Monad =
      ./../Monad/Type sha256:f29e46a0fad45deefe74dbaf6daf7ff1abaaf7b02d672dfc254245ebc0cd651a

let Compose =
      ./../Compose/Type sha256:e830545569ce8ba04d3124a7ca93994fc93e18c0372616f45910253f0a00907d

let vObject = Type

let v =
      ./../Category/Monoidal/Cartesian/extractCategory sha256:5d481c2c40201add9d14edc5a5ff6471a11fa9c58fea348279927339cfd60456
      cat
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:3a79a17d1c39a3df58efcc62fd96a2da0147bb29b524f57aa7c35942f653f164

let Category =
      ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
      cat
      vObject

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(c : Category cObject)
    → λ(d : Category dObject)
    → λ(f : cat.arrow dObject cObject)
    → λ(g : cat.arrow cObject dObject)
    → λ(functor : Functor vObject cObject dObject v c d g)
    → λ(adjunction : Adjunction cObject dObject c d f g)
    →   { unit =
            adjunction.unit
        , product =
              λ(a : dObject)
            → functor.map (f (g (f a))) (f a) (adjunction.counit (f a))
        }
      : Monad dObject d (Compose dObject cObject dObject { _1 = g, _2 = f })
