{- FIXME: This should use `./../Monoid/Type … (./../Category/Monoidal/Profunctor
          object morphism)`, but the identity in that monoidal category
          definition isn’t correct (or, if it is, I can’t figure out how to use
          it). So instead, we just build the `Semigroup`, and then write a
          custom identity. But this means we’re not structurally a `Monoid`.
-}
let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

in    λ ( object
        : Kind
        )
    → let profunctor =
            kArrow (kProduct object object) Type
      
      in    λ ( morphism
              : profunctor
              )
          →   { identity :
                  ∀(a : object) → morphism { _1 = a, _2 = a }
              }
            ⩓ ./../Semigroupoid/Type sha256:7ea3ed050672efbe97058fdf8cee2c448261528fb9df88e77792684384125059
              object
              morphism
