let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

let vBase =
      ./../Category/Monoidal/extractCategory kArrow kProduct Type vObject v

let Category = ./../Category/Kind kArrow kProduct vObject

in    λ(cObject : Kind)
    → λ(c : Category cObject)
    → λ(dObject : Kind)
    → λ(d : Category dObject)
    → λ(dCategory : ./../Category/Type dObject v d)
    → λ(f : kArrow cObject dObject)
    → λ(functor : ./../Functor/Type vObject cObject dObject vBase c d f)
    → ./../Ran/lift
      cObject
      cObject
      dObject
      c
      d
      (./../Category/extractSemigroupoid dObject v d dCategory)
      f
      functor
      (./../Identity/Type cObject)
      f
      (λ(a : cObject) → dCategory.identity (f a))
