let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let cObject = Type

let c = ./../Category/Set/monoidal/cartesian

in    λ(dObject : Kind)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(f : kArrow cObject dObject)
    → λ(functor : ./Type cObject dObject c.arrow dArrow f)
    → λ(a : cObject)
    → functor.map a c.identity (λ(_ : a) → {=})
