let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(object : Kind)
    → λ(arrow : kArrow (kProduct object object) Type)
    → λ(category : ./../Category/Type object arrow)
    →   { monoid =
            ./monad object arrow category
        , comonoid =
            ./monad
            object
            (./../Category/Op/Type object arrow)
            (./../Category/Op/category object arrow category)
        }
      : ./../Bimonad/Type object arrow (./Type object)
