let kCat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let Category/Semigroupal =
      ./../Category/Semigroupal/Kind sha256:5d216a5d95721e6086fab2cd85f039d15a9d06b8a986ef170823a57a0c0d02d6

let extractCategory =
      ./../Category/Semigroupal/extractCategory sha256:e424ab1a06cccec93571da2bc08642157fd9e60030535233320a7e22c02d01b6

let Category =
      ./../Category/Type sha256:a3968397f7c9a309d7c4eed545517a4e6f451eff463aaaf274fd1c7d37cb3004

let Strong =
      ./../Strong/Type sha256:f826a092356d88b7bc710c0552b54ab6f109219108cb032fdb6b0d58594b9c54

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:96b5eca83adb85b7bc744975b530210da2aec17c9c70b45d3b241ccfdb47e772
          kCat
          Type
          vObject
        )
    → λ(cat : Category/Semigroupal kCat vObject object)
    → let base = extractCategory kCat vObject object cat
      
      in    { split :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → ∀(d : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = c, _2 = d }
                → cat.arrow
                  { _1 =
                      cat.product { _1 = a, _2 = c }
                  , _2 =
                      cat.product { _1 = b, _2 = d }
                  }
            , fanout :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = a, _2 = c }
                → cat.arrow { _1 = a, _2 = cat.product { _1 = b, _2 = c } }
            }
          ⩓ Category object v base
          ⩓ Strong object object v base base cat.arrow
