let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let object = Type

in    λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → λ(semigroupoid : ./../Semigroupoid/Type object v cat cat.arrow)
    → λ(f : kArrow object object)
    → λ(comonad : ./../Comonad/Type object cat f)
    → λ(g : kArrow object object)
    → λ(a : object)
    → λ(x : g a)
    → λ(r : Type)
    → λ(k : ∀(b : object) → cat.arrow { _1 = f b, _2 = a } → g b → r)
    → k a (comonad.identity a) x
