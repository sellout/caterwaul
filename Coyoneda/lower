let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → let dObject = Type
      
      let dArrow = ./../Function/Type
      
      let dCategory = ./../Function/category
      
      in    λ(f : kArrow cObject dObject)
          → λ(functor : ./../Functor/Type cObject dObject cArrow dArrow f)
          → ./../Lan/lower
            cObject
            cObject
            cArrow
            f
            functor
            (./../Identity/Type cObject)
            f
            (λ(b : cObject) → dCategory.identity (f b))
