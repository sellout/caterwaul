let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

let v = ./../Set/monoidal/cartesian

in    λ(cObject : Kind)
    → λ(c : ./../Kind kArrow kProduct vObject cObject)
    → λ(cCategory : ./../Type cObject v c)
    → λ(dObject : Kind)
    → λ(d : ./../Kind kArrow kProduct vObject dObject)
    → λ(dCategory : ./../Type dObject v d)
    → let object = { _1 : cObject, _2 : dObject }
      
      let prod = ./Type vObject cObject dObject v c d
      
      in    { identity =
                  λ(a : object)
                → { _1 = cCategory.identity a._1, _2 = dCategory.identity a._2 }
            , op =
                  λ(a : { _1 : object, _2 : object })
                → λ ( p
                    :   ∀(r : Type)
                      → (   ∀(z : object)
                          → prod.arrow { _1 = z, _2 = a._2 }
                          → prod.arrow { _1 = a._1, _2 = z }
                          → r
                        )
                      → r
                    )
                → { _1 =
                      cCategory.op
                      { _1 = a._1._1, _2 = a._2._1 }
                      (   λ(r : Type)
                        → λ ( arrowsOut
                            :   ∀(z : cObject)
                              → c.arrow { _1 = z, _2 = a._2._1 }
                              → c.arrow { _1 = a._1._1, _2 = z }
                              → r
                            )
                        → p
                          r
                          (   λ(z : object)
                            → λ(f : prod.arrow { _1 = z, _2 = a._2 })
                            → λ(g : prod.arrow { _1 = a._1, _2 = z })
                            → arrowsOut z._1 f._1 g._1
                          )
                      )
                  , _2 =
                      dCategory.op
                      { _1 = a._1._2, _2 = a._2._2 }
                      (   λ(r : Type)
                        → λ ( arrowsOut
                            :   ∀(z : dObject)
                              → d.arrow { _1 = z, _2 = a._2._2 }
                              → d.arrow { _1 = a._1._2, _2 = z }
                              → r
                            )
                        → p
                          r
                          (   λ(z : object)
                            → λ(f : prod.arrow { _1 = z, _2 = a._2 })
                            → λ(g : prod.arrow { _1 = a._1, _2 = z })
                            → arrowsOut z._2 f._2 g._2
                          )
                      )
                  }
            }
          : ./../Type object v prod
