let kCat = ./../Category/Cat/semigroupal

let vObject = Type

let Category/Semigroupal = ./../Category/Semigroupal/Kind

let extractCategory = ./../Category/Semigroupal/extractCategory

let Category = ./../Category/Type

let Strong = ./../Strong/Type

in    λ(object : Kind)
    → λ(v : ./../Category/Monoidal/Kind kCat Type vObject)
    → λ(cat : Category/Semigroupal kCat vObject object)
    → let base = extractCategory kCat vObject object cat
      
      in    { split :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → ∀(d : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = c, _2 = d }
                → cat.arrow
                  { _1 =
                      cat.product { _1 = a, _2 = c }
                  , _2 =
                      cat.product { _1 = b, _2 = d }
                  }
            , fanout :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = a, _2 = c }
                → cat.arrow { _1 = a, _2 = cat.product { _1 = b, _2 = c } }
            }
          ⩓ Category object v base
          ⩓ Strong object object v base base cat.arrow
