{- NB: Since this is currently forced to be in *Set*, it’s quite possible that
       some of the uses of _C_ and _D_ are wrong, since the type system can’t
       distinguish them. So take them with a grain of salt if you’re editing
       this file.
-}
let cat =
      ./../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let base =
      ./../../Category/Monoidal/Cartesian/extractMonoidal sha256:0fcc63fc837459ca2866d31c5b11400b56fcb8f7d1846b774e98b47995c1879a
      cat

let MonoidalFunctor =
      ./../../Functor/Monoidal/Type sha256:73d6a61a626107cf8fc9ee73e02b3116a2540bae6fa38881165eab9d8c0f8913

let vObject = Type

in    λ ( cObject
        : Kind
        )
    → λ ( v
        : ./../../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          Type
          vObject
        )
    → λ ( vCategory
        : ./../../Category/Type sha256:a3968397f7c9a309d7c4eed545517a4e6f451eff463aaaf274fd1c7d37cb3004
          vObject
          ( base
            vObject
            Type
            ./../../Category/Set/monoidal/cartesian sha256:b6efbdc0effbca1bc7427c980f2579012808494a8195fdf9fb52aea37ae91116
          )
          v
        )
    → λ ( c
        : ./../../Category/Monoidal/Kind sha256:96b5eca83adb85b7bc744975b530210da2aec17c9c70b45d3b241ccfdb47e772
          cat
          vObject
          cObject
        )
    → let dObject =
            Type
      
      let d =
            base
            vObject
            dObject
            ./../../Category/Set/monoidal/cartesian sha256:b6efbdc0effbca1bc7427c980f2579012808494a8195fdf9fb52aea37ae91116
      
      let eObject = Type
      
      let e =
            base
            vObject
            eObject
            ./../../Category/Set/monoidal/cartesian sha256:b6efbdc0effbca1bc7427c980f2579012808494a8195fdf9fb52aea37ae91116
      
      let Compose =
            ./../Type sha256:e830545569ce8ba04d3124a7ca93994fc93e18c0372616f45910253f0a00907d
            cObject
            dObject
            eObject
      
      let Day =
            ./../../Day/Type sha256:ba33d670ee62e655ba9a4e6345ce1dca028a782f36a37bb8e0fcd3ae3881f9c7
            cObject
            e
            c
      
      let Day/convolution =
            ./../../Day/convolution sha256:9c319003951ddc83300318bd31dee48bc16d2f48890593ed4363470ab6763426
      
      in    λ(f : cat.arrow dObject eObject)
          → λ(fMonoidal : MonoidalFunctor dObject v d e f)
          → λ(g : cat.arrow cObject dObject)
          → λ(gMonoidal : MonoidalFunctor cObject v c d g)
          →   { map =
                    λ(a : cObject)
                  → λ(b : cObject)
                  → vCategory.product
                    { _1 =
                        c.arrow { _1 = a, _2 = b }
                    , _2 =
                        e.arrow { _1 = f (g a), _2 = f (g b) }
                    }
                    (   λ(r : Type)
                      → λ ( arrowsOut
                          :   ∀(z : vObject)
                            → v.arrow
                              { _1 =
                                  z
                              , _2 =
                                  e.arrow { _1 = f (g a), _2 = f (g b) }
                              }
                            → v.arrow
                              { _1 = c.arrow { _1 = a, _2 = b }, _2 = z }
                            → r
                          )
                      → arrowsOut
                        (d.arrow { _1 = g a, _2 = g b })
                        (fMonoidal.map (g a) (g b))
                        (gMonoidal.map a b)
                    )
              , identity =
                    λ(a : cObject)
                  → λ(fn : c.arrow { _1 = c.identity, _2 = a })
                  → fMonoidal.identity
                    (g a)
                    (λ(_ : d.identity) → gMonoidal.identity a fn)
              , product =
                    λ(i : cObject)
                  → λ ( day
                      : Day
                        { _1 =
                            Compose { _1 = f, _2 = g }
                        , _2 =
                            Compose { _1 = f, _2 = g }
                        }
                        i
                      )
                  → day
                    (f (g i))
                    (   λ(b : { _1 : cObject, _2 : cObject })
                      → λ(fn : c.arrow { _1 = c.product b, _2 = i })
                      → λ(a : { _1 : f (g b._1), _2 : f (g b._2) })
                      → fMonoidal.product
                        (g i)
                        (   λ(fr : eObject)
                          → λ(fDay : Day/convolution dObject e d f f (g i) fr)
                          → fDay
                            { _1 = g b._1, _2 = g b._2 }
                            (   λ(p : { _1 : g b._1, _2 : g b._2 })
                              → gMonoidal.product
                                i
                                (   λ(gr : dObject)
                                  → λ ( gDay
                                      : Day/convolution cObject d c g g i gr
                                      )
                                  → gDay b fn p
                                )
                            )
                            a
                        )
                    )
              }
            : MonoidalFunctor cObject v c e (Compose { _1 = f, _2 = g })
