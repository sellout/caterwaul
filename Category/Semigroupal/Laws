let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(object : Kind)
    → λ(cat : ./Kind kArrow kProduct object)
    → let Isomorphism = ./../../Isomorphism/Type object cat.arrow
      
      in  { associativity :
                ∀(a : object)
              → ∀(subA : cat.constraint a)
              → ∀(b : object)
              → ∀(subB : cat.constraint b)
              → ∀(c : object)
              → ∀(subC : cat.constraint c)
              → Isomorphism
                { _1 =
                    cat.op { _1 = cat.op { _1 = a, _2 = b }, _2 = c }
                , _2 =
                    cat.op { _1 = a, _2 = cat.op { _1 = b, _2 = c } }
                }
          }
