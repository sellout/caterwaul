let kArrow = ./../Function/Kind

let object = Type

let cat = ./../Category/Set/monoidal/cartesian

let CommutativeSemigroup =
      ./../Semigroup/Commutative/Type object cat.arrow cat.op

let extractMonoid = ./../Functor/Monoidal/extractMonoid object cat cat

in    λ(a : object)
    → λ(semigroup : CommutativeSemigroup a)
    →   { additive =
            extractMonoid
            (λ(b : object) → ./Type { _1 = a, _2 = b })
            (./functor/monoidal/parallel a semigroup)
        , multiplicative =
            extractMonoid
            (λ(b : object) → ./Type { _1 = a, _2 = b })
            (./functor/monoidal/sequential a)
        }
      : ./../Duoid/Type
        (kArrow object object)
        (./../Category/Endofunctor/monoidal/functor cat)
        (λ(b : object) → ./Type { _1 = a, _2 = b })
