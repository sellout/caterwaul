let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let base = ./../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

in    λ(cObject : Kind)
    → λ(cpObject : Kind)
    → λ(cp : ./../Category/Kind kArrow kProduct vObject cpObject)
    → λ(cpSemigroupoid : ./../Semigroupoid/Type cpObject v cp cp.arrow)
    → let dObject = Type
      
      let d = base vObject dObject ./../Category/Set/monoidal/cartesian
      
      let Lan = ./Type cObject cpObject cp
      
      in    λ(f : kArrow cObject cpObject)
          → λ(g : kArrow cObject dObject)
          →   { map =
                    λ(a : cpObject)
                  → λ(b : cpObject)
                  → λ(h : cp.arrow { _1 = a, _2 = b })
                  → λ(lan : Lan f g a)
                  → λ(r : Type)
                  → λ ( k
                      :   ∀(c : cObject)
                        → cp.arrow { _1 = f c, _2 = b }
                        → d.arrow { _1 = g c, _2 = r }
                      )
                  → lan
                    r
                    (   λ(c : cObject)
                      → λ(x : cp.arrow { _1 = f c, _2 = a })
                      → k
                        c
                        ( cpSemigroupoid.op
                          { _1 = f c, _2 = b }
                          (   λ(r : Type)
                            → λ ( arrowsOut
                                :   ∀(z : cpObject)
                                  → cp.arrow { _1 = z, _2 = b }
                                  → cp.arrow { _1 = f c, _2 = z }
                                  → r
                                )
                            → arrowsOut a h x
                          )
                        )
                    )
              }
            : ./../Functor/Type
              vObject
              cpObject
              dObject
              (base Type vObject v)
              cp
              d
              (Lan f g)
