let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let Category = ./../../Category/Kind kArrow kProduct

let MonoidalCategory = ./../../Category/Monoidal/Kind kArrow kProduct

in    λ(vObject : Kind)
    → λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(v : MonoidalCategory Type vObject)
    → λ(c : Category vObject cObject)
    → λ(d : Category vObject dObject)
    → let object = { _1 : cObject, _2 : dObject }
      
      in    { constraint =
                  λ(obj : object)
                → { _1 : c.constraint obj._1, _2 : d.constraint obj._2 }
            , arrow =
                  λ(a : { _1 : object, _2 : object })
                → v.op
                  { _1 =
                      c.arrow { _1 = a._1._1, _2 = a._2._1 }
                  , _2 =
                      d.arrow { _1 = a._1._2, _2 = a._2._2 }
                  }
            }
          : Category vObject object
