let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Semigroupal/Kind kArrow kProduct vObject object)
    → let base =
            ./../Category/Semigroupal/extractCategory
            kArrow
            kProduct
            vObject
            object
            cat
      
      in    λ(arrow : ./Type object v cat)
          →   arrow.{ lmap, map, rmap }
            : ./../Strong/Type object object v base base cat.arrow
