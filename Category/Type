{- FIXME: This should use `./../Monoid/Type … (./../Category/Monoidal/Profunctor
          object morphism)`, but the identity in that monoidal category
          definition isn’t correct (or, if it is, I can’t figure out how to use
          it). So instead, we just build the `Semigroup`, and then write a
          custom identity. But this means we’re not structurally a `Monoid`.
-}
let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(v : ./Monoidal/Kind kArrow kProduct Type vObject)
    → λ(cat : ./Kind kArrow kProduct vObject object)
    →   { identity : ∀(a : object) → cat.arrow { _1 = a, _2 = a } }
      ⩓ ./../Semigroupoid/Type object v cat cat.arrow
