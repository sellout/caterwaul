let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(dObject : Kind)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(f : kArrow dObject cObject)
    → λ(g : kArrow cObject dObject)
    → λ(gFunctor : ./../Functor/Type cObject dObject cArrow dArrow g)
    → λ(adjunction : ./../Adjunction/Type cObject dObject cArrow dArrow f g)
    →   { identity =
            adjunction.unit
        , op =
              λ(a : dObject)
            → gFunctor.map (f (g (f a))) (f a) (adjunction.counit (f a))
        }
      : ./../Monad/Type
        dObject
        dArrow
        (./Type dObject cObject dObject { _1 = g, _2 = f })
