let kArrow = ./../../../Function/Kind

let kProduct = ./../../../Tuple/Kind

let vObject = Type

let v = ./../../../Category/Set/monoidal/cartesian

in    λ(object : Kind)
    → λ(cat : ./../../../Category/Kind kArrow kProduct vObject object)
    → λ(category : ./../../../Category/Type object v cat)
    → λ(f : kArrow object object)
    → λ(g : kArrow object object)
    → λ ( functor
        : ./Type
          vObject
          object
          ( ./../../../Category/Monoidal/extractCategory
            kArrow
            kProduct
            Type
            vObject
            v
          )
          cat
          f
          g
        )
    → λ(a : object)
    → functor.map (f a) a (category.identity (f a))
