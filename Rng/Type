let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(object : Kind)
    → λ(cat : ./../Category/Monoidal/Kind kArrow kProduct vObject object)
    → λ(m : object)
    → { additive :
          ./../Group/Commutative/Type object cat m
      , multiplicative :
          ./../Semigroup/Type
          object
          ( ./../Category/Monoidal/extractSemigroupal
            kArrow
            kProduct
            vObject
            object
            cat
          )
          m
      }
