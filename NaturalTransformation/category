let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(dObject : Kind)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(dCategory : ./../Category/Type dObject dArrow)
    → let object = kArrow cObject dObject
      
      let arrow = ./Type cObject dObject dArrow
      
      in    { identity =
                λ(a : object) → λ(i : cObject) → dCategory.identity (a i)
            , op =
                  λ(a : { _1 : object, _2 : object })
                → λ ( p
                    :   ∀(r : Type)
                      → (   ∀(z : object)
                          → arrow { _1 = z, _2 = a._2 }
                          → arrow { _1 = a._1, _2 = z }
                          → r
                        )
                      → r
                    )
                → λ(i : cObject)
                → dCategory.op
                  { _1 = a._1 i, _2 = a._2 i }
                  (   λ(r : Type)
                    → λ ( arrowsOut
                        :   ∀(z : dObject)
                          → dArrow { _1 = z, _2 = a._2 i }
                          → dArrow { _1 = a._1 i, _2 = z }
                          → r
                        )
                    → p
                      r
                      (   λ(z : object)
                        → λ(f : arrow { _1 = z, _2 = a._2 })
                        → λ(g : arrow { _1 = a._1, _2 = z })
                        → arrowsOut (z i) (f i) (g i)
                      )
                  )
            }
          : ./../Category/Type object arrow
