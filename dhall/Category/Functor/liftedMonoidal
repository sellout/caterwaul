{- For any monoidal category 𝒞, any 𝒞-valued functor category is monoidal in the
   same way by “lifting” the monoidal structure of 𝒞.
-}
let cat = ../Cat/semigroupal

let vObject = Type

let Category = ../Kind cat

let MonoidalCategory = ../Monoidal/Kind cat

in  λ(cObject : Kind) →
      let dObject = Type

      in  λ(v : Category Type vObject) →
          λ(c : Category vObject cObject) →
          λ(d : MonoidalCategory vObject dObject) →
            let base = ../Monoidal/extractCategory cat vObject

            let object = cat.arrow cObject dObject

            in      { unit =
                        λ(x : cObject) →
                          ../../Functor/Constant/Type
                            dObject
                            cObject
                            { _1 = d.unit, _2 = x }
                    , product =
                        λ(f : { _1 : object, _2 : object }) →
                        λ(x : cObject) →
                          d.product { _1 = f._1 x, _2 = f._2 x }
                    }
                  ∧ ./category cObject dObject v c (base dObject d)
                : MonoidalCategory vObject object
