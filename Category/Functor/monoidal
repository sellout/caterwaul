{- This cheats a bit on the identity, since `dObject` is Type, we don‚Äôt need a
   functor **Set** ‚Üí ùíü.
-}
let kArrow =
      ./../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let vObject = Type

let MonoidalCategory =
      ./../Monoidal/Kind sha256:f05d8665b46c686b6b930ad18aad6e1daa8c7a9c104d7bbeec947389d4d83e48
      kArrow
      kProduct
      vObject

in    Œª ( cObject
        : Kind
        )
    ‚Üí let dObject =
            Type
      
      in    Œª ( v
              : ./../Kind sha256:41ea86fd34226d0dc3c87cc12f9ce042e3b54e7eb77b451cdbfb085ba3f66916
                kArrow
                kProduct
                Type
                vObject
              )
          ‚Üí Œª(c : MonoidalCategory cObject)
          ‚Üí Œª(d : MonoidalCategory dObject)
          ‚Üí let base =
                  ./../Monoidal/extractCategory sha256:f8fd8dd2ec93dac14e091587db11696f084c1d8eb9de88b71b625151904db9ff
                  kArrow
                  kProduct
                  vObject
            
            in      { identity =
                        Œª(x : cObject) ‚Üí c.arrow { _1 = c.identity, _2 = x }
                    , op =
                        ./../../Day/Type sha256:08b059e69330b8894b4a1830425eea70c2e4a0366c97e99cad8c073283bab16d
                        cObject
                        d
                        c
                    }
                  ‚àß ./category sha256:20c87f9335c2da300dd29d45d7e78499a113481708800d86b12d1fb55ae58d9d
                    cObject
                    dObject
                    v
                    (base cObject c)
                    (base dObject d)
                : MonoidalCategory (kArrow cObject dObject)
