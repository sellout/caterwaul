let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

in    λ(cObject : Kind)
    → let dObject = Type
      
      in    λ(d : ./../Category/Kind kArrow kProduct vObject dObject)
          → λ(dSemigroupoid : ./../Semigroupoid/Type dObject v d d.arrow)
          → λ(f : kArrow cObject dObject)
          → ./../Lan/functor cObject dObject d dSemigroupoid f f
