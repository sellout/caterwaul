let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let object = Type

let Set = ./../Category/Set/monoidal/cartesian

let base = ./../Category/Monoidal/extractCategory kArrow kProduct vObject

in    λ(s : object)
    →   { unit =
            λ(a : object) → λ(x : a) → λ(y : s) → { _1 = y, _2 = x }
        , counit =
            λ(a : object) → λ(x : { _1 : s, _2 : s → a }) → x._2 x._1
        , leftAdjunct =
              λ(a : object)
            → λ(b : object)
            → λ(f : { _1 : s, _2 : a } → b)
            → λ(x : a)
            → λ(y : s)
            → f { _1 = y, _2 = x }
        , rightAdjunct =
              λ(a : object)
            → λ(b : object)
            → λ(f : a → s → b)
            → λ(t : { _1 : s, _2 : a })
            → f t._2 t._1
        }
      : ./../Adjunction/Type
        object
        object
        (base object Set)
        (base object Set)
        (λ(a : object) → Set.op { _1 = s, _2 = a })
        (λ(a : object) → Set.arrow { _1 = s, _2 = a })
