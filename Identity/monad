let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

in    λ(object : Kind)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → λ(category : ./../Category/Type object v cat)
    →   { identity = category.identity, op = category.identity }
      : ./../Monad/Type object cat (./Type object)
