let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(object : Kind)
    → λ(arrow : kArrow (kProduct object object) Type)
    → λ(semigroupoid : ./../Semigroupoid/Type object arrow)
    → λ(m : kArrow object object)
    → λ(functor : ./../Functor/Endo/Type object arrow m)
    → λ(monad : ./Type object arrow m)
    →   { map =
              λ(a : object)
            → λ(b : object)
            → λ(f : arrow { _1 = a, _2 = m b })
            → semigroupoid.op
              { _1 = m a, _2 = m b }
              (   λ(r : Type)
                → λ ( arrowsOut
                    :   ∀(z : object)
                      → arrow { _1 = z, _2 = m b }
                      → arrow { _1 = m a, _2 = z }
                      → r
                    )
                → arrowsOut (m (m b)) (monad.op b) (functor.map a (m b) f)
              )
        }
      : ./../Functor/Star/Type object arrow m m
