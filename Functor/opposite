let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(f : kArrow cObject dObject)
    → λ(functor : ./Type cObject dObject cArrow dArrow f)
    →   { map = λ(a : cObject) → λ(b : cObject) → functor.map b a }
      : ./Type
        cObject
        dObject
        (./../Category/Op/Type cObject cArrow)
        (./../Category/Op/Type dObject dArrow)
        f
