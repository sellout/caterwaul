{- A functor from a Cokleisli category to the underlying category -}
let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(vObject : Kind)
    → λ(object : Kind)
    → λ(v : ./../Category/Kind kArrow kProduct Type vObject)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → ./Star/Type vObject object v (./../Category/Op/Kind vObject object cat)
