{- For any monoidal category ùíû, any ùíû-valued functor category is monoidal in the
   same way by ‚Äúlifting‚Äù the monoidal structure of ùíû.
-}
let cat =
      ./../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let Category =
      ./../Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
      cat

let MonoidalCategory =
      ./../Monoidal/Kind sha256:8e77a076f4c2f6e1d0ad07cfec37dfd04782e1a0a7e98a72a305233f69c494ca
      cat

in    Œª ( cObject
        : Kind
        )
    ‚Üí let dObject =
            Type
      
      in    Œª ( v
              : Category Type vObject
              )
          ‚Üí Œª(c : Category vObject cObject)
          ‚Üí Œª(d : MonoidalCategory vObject dObject)
          ‚Üí let base =
                  ./../Monoidal/extractCategory sha256:c9807a603a6bd9f0ef13debb0f11e63d6f7133870fef175f27d08dd81c2ff695
                  cat
                  vObject
            
            let object = cat.arrow cObject dObject
            
            in      { unit =
                          Œª ( x
                            : cObject
                            )
                        ‚Üí ./../../Const/Type sha256:d0d255964e7701c8f9aa67f01b9f97dac9fbbda16e9c326faa48cddc1cf63740
                          dObject
                          cObject
                          { _1 = d.unit, _2 = x }
                    , product =
                          Œª(f : { _1 : object, _2 : object })
                        ‚Üí Œª(x : cObject)
                        ‚Üí d.product { _1 = f._1 x, _2 = f._2 x }
                    }
                  ‚àß ./category sha256:c69163eac75892504c9b6fd8b9637704c20e0baa23c5d428ecfb2b4587414bef
                    cObject
                    dObject
                    v
                    c
                    (base dObject d)
                : MonoidalCategory vObject object
