{- This, specialized to `Type ../Category/Set/type`, is equivalent to Haskell’s
  `Profunctor`. Not to be confused with Dhall’s `./Profunctor`, which is more
   general.
-}
let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → ./Hom
      vObject
      v
      (./../Category/Monoidal/extractCategory kArrow kProduct Type vObject v)
