let kArrow =
      ./../../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

let object = Type

let cat =
      ./../../../Category/Set/monoidal/cartesian sha256:b3c97e385d62b718ab11e540a98141cb81b89db0d7c1115ec11b330c596dcf01

let Semigroup =
      ./../../../Semigroup/Type sha256:d1635ee2a3c9117f5d330d01ec4ae277f46bd0726c670179994510a57c2fbc32
      object
      ( ./../../../Category/Monoidal/extractSemigroupal sha256:70ef91047fc61f9b95bc9a7c791c6e18d62c8c91d88741f2f72a070b3e820f1f
        kArrow
        kProduct
        object
        cat
      )

let Either =
      ./../../Type sha256:9ac62b105c684db0a562407c0132176c20e93cb29e9434f9b600ed5806cd9fc0

in    λ ( a
        : object
        )
    → λ(semigroup : Semigroup a)
    →     ./../endo/star sha256:32aede32d0a6106fa9381778d63f4997b3f32d517f862aa0f299726bc7cbdf3a
          ( ./../../../Identity/Type sha256:0f2ca3c3cd4682978197536d6365c4002a9b95ebbe882e8562879ee16736c3ae
            object
          )
          ./../../../Identity/functor/monoidal sha256:2c113f02d3d833842925e85ffe0c50629d939f6a53bd453ab9127c714204ef26
          a
        ∧ { identity =
                λ(b : object)
              → λ(fn : cat.arrow { _1 = cat.identity, _2 = b })
              → < Right = fn {=} | Left : a >
          , op =
                λ(i : object)
              → λ ( day
                  :   ∀(r : Type)
                    → (   ∀(d : { _1 : object, _2 : object })
                        → cat.arrow { _1 = cat.op d, _2 = i }
                        → { _1 :
                              Either { _1 = a, _2 = d._1 }
                          , _2 :
                              Either { _1 = a, _2 = d._2 }
                          }
                        → r
                      )
                    → r
                  )
              → day
                (Either { _1 = a, _2 = i })
                (   λ(p : { _1 : object, _2 : object })
                  → λ(fn : cat.arrow { _1 = cat.op p, _2 = i })
                  → λ ( args
                      : { _1 :
                            Either { _1 = a, _2 = p._1 }
                        , _2 :
                            Either { _1 = a, _2 = p._2 }
                        }
                      )
                  → merge
                    { Left =
                          λ(l : a)
                        → merge
                          { Left =
                                λ(ll : a)
                              → < Left =
                                    semigroup.op { _1 = l, _2 = ll }
                                | Right :
                                    i
                                >
                          , Right =
                              λ(_ : p._2) → < Left = l | Right : i >
                          }
                          args._2
                    , Right =
                          λ(f : cat.arrow { _1 = p._2, _2 = i })
                        → merge
                          { Left =
                              λ(x : a) → < Left = x | Right : i >
                          , Right =
                              λ(x : p._2) → < Right = f x | Left : a >
                          }
                          args._2
                    }
                    ( merge
                      { Left =
                          λ(x : a) → < Left = x | Right : p._2 → i >
                      , Right =
                            λ(x : p._1)
                          → < Right =
                                λ(y : p._2) → fn { _1 = x, _2 = y }
                            | Left :
                                a
                            >
                      }
                      args._1
                    )
                )
          }
      : ./../../../Functor/Monoidal/Type sha256:bf47360872158ca906f90c060e3a3339c2ca60a630baa0446884e840ca7fbf70
        object
        cat
        cat
        (λ(b : object) → Either { _1 = a, _2 = b })
