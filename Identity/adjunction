let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let object = Type

let cat =
      ./../Category/Monoidal/extractCategory
      kArrow
      kProduct
      vObject
      object
      ./../Category/Set/monoidal/cartesian

in    { unit =
          λ(a : object) → λ(x : a) → x
      , counit =
          λ(a : object) → λ(x : a) → x
      , leftAdjunct =
          λ(a : object) → λ(b : object) → λ(f : a → b) → f
      , rightAdjunct =
          λ(a : object) → λ(b : object) → λ(f : a → b) → f
      }
    : ./../Adjunction/Type object object cat cat (./Type object) (./Type object)
