let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

in    λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(v : ./../Category/Monoidal/Kind kArrow kProduct Type vObject)
    → λ(c : ./../Category/Kind kArrow kProduct vObject cObject)
    → λ(d : ./../Category/Kind kArrow kProduct vObject dObject)
    → λ(f : kArrow (kProduct dObject cObject) Type)
    →   { lmap :
            let op = ./../Category/Op/Kind vObject dObject d
            
            in    ∀(h : dObject)
                → ∀(i : dObject)
                → ∀(j : cObject)
                → op.arrow { _1 = h, _2 = i }
                → f { _1 = h, _2 = j }
                → f { _1 = i, _2 = j }
        , rmap :
              ∀(h : dObject)
            → ∀(i : cObject)
            → ∀(j : cObject)
            → c.arrow { _1 = i, _2 = j }
            → f { _1 = h, _2 = i }
            → f { _1 = h, _2 = j }
        }
      ⩓ ./../Functor/Profunctor/Type cObject dObject v c d f
