let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let base = ./../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = base Type vObject ./../Category/Set/monoidal/cartesian

let object = Type

let cat = base vObject object ./../Category/Set/monoidal/cartesian

in    λ(f : kArrow object object)
    → λ(functor : ./../Functor/Endo/Type vObject object v cat f)
    → λ(comonad : ./../Comonad/Type object cat f)
    → ./../Lan/lower object object cat f functor f f comonad.op
