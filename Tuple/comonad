let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let setObject = Type

let Set = ./../Category/Set/monoidal/cartesian

let base =
      ./../Category/Monoidal/extractCategory
      kArrow
      kProduct
      vObject
      setObject
      Set

in    λ(a : Type)
    →   { identity =
            λ(b : setObject) → λ(tup : Set.op { _1 = a, _2 = b }) → tup._2
        , op =
              λ(b : setObject)
            → λ(tup : Set.op { _1 = a, _2 = b })
            → { _1 = tup._1, _2 = tup }
        }
      : ./../Comonad/Type
        setObject
        base
        (λ(b : setObject) → Set.op { _1 = a, _2 = b })
