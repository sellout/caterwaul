let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let Category = ./../../Category/Kind kArrow kProduct

let MonoidalCategory = ./../../Category/Monoidal/Kind kArrow kProduct

let Functor = ./../Type

let Category/Product = ./../../Category/Product/Type

in    λ(vObject : Kind)
    → λ(cObject : Kind)
    → λ(dObject : Kind)
    → λ(eObject : Kind)
    → λ(v : MonoidalCategory Type vObject)
    → λ(c : Category vObject cObject)
    → λ(d : Category vObject dObject)
    → Functor
      vObject
      { _1 : cObject, _2 : dObject }
      eObject
      (./../../Category/Monoidal/extractCategory kArrow kProduct Type vObject v)
      (Category/Product vObject cObject dObject v c d)
