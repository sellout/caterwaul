let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cpObject : Kind)
    → λ(cpArrow : kArrow (kProduct cpObject cpObject) Type)
    → let dObject = Type
      
      let dArrow = ./../Function/Type
      
      let dSemigroupoid = ./../Function/semigroupoid
      
      in    λ(h : kArrow cpObject dObject)
          → λ(functor : ./../Functor/Type cpObject dObject cpArrow dArrow h)
          → λ(f : kArrow cObject cpObject)
          → λ(g : kArrow cObject dObject)
          → λ(duplicate : ∀(b : cObject) → dArrow { _1 = g b, _2 = h (f b) })
          → λ(a : cpObject)
          → λ(lan : ./Type cObject cpObject cpArrow f g a)
          → lan
            (h a)
            (   λ(b : cObject)
              → λ(k : cpArrow { _1 = f b, _2 = a })
              → dSemigroupoid.op
                { _1 = g b, _2 = h a }
                (   λ(r : Type)
                  → λ ( arrowsOut
                      :   ∀(z : dObject)
                        → dArrow { _1 = z, _2 = h a }
                        → dArrow { _1 = g b, _2 = z }
                        → r
                      )
                  → arrowsOut (h (f b)) (functor.map (f b) a k) (duplicate b)
                )
            )
