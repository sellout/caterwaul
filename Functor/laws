let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./../Category/Monoidal/Cartesian/extractMonoidal sha256:25afdf2818357f9c4b9dac6652b82e730472c389a634f8417a6014d39c7cddc0
      cat
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

in    λ ( cObject
        : Kind
        )
    → let dObject =
            Type
      
      in    λ ( c
              : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
                cat
                vObject
                cObject
              )
          → λ ( cCategory
              : ./../Category/Type sha256:5792bd3a482ad0d318aecda464bd952a6561dc1119bdc1f5db574cfc3b66e095
                cObject
                v
                c
              )
          → let d =
                  ./../Category/Monoidal/Cartesian/extractCategory sha256:fe359f472fbc38300f29f9f50522e2e23d0bb16034bc98c93265a1f5aeb01349
                  cat
                  vObject
                  dObject
                  ./../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576
            
            let dCategory =
                  ./../Category/Set/category sha256:9d632babf74a31ec2425b5d25bf8627d2ae5ab22605a5168b33f84ece51d2f2e
            
            in    λ ( f
                    : cat.arrow cObject dObject
                    )
                → λ ( functor
                    : ./Type sha256:bebd999f32d6a3fd9bd7151ca5f0942ed6aeded30809c4a7e6c91382bed2dbcb
                      vObject
                      cObject
                      dObject
                      ( ./../Category/Monoidal/extractCategory sha256:936b393338b8dcf60af6c25ecea2b0b02d83e18acfed60ff736754fe0c1d7b3d
                        cat
                        Type
                        vObject
                        v
                      )
                      c
                      d
                      f
                    )
                → { identity =
                        λ ( a
                          : cObject
                          )
                      → λ ( eq
                          : ./../Eq/Type sha256:16ec0250d1cd6f2d48bb5fe37d46d1db9ef640657c7b247b8d5be1aca30259b1
                            (f a)
                          )
                      → ./../Eq/eqfn sha256:6c0871046404917eb6fa8b4177f76d4a33aad3eeb86ee5422abf565ac851805f
                        (f a)
                        (f a)
                        eq
                        (functor.map a a (cCategory.identity a))
                        (dCategory.identity (f a))
                  , composition =
                        λ ( a
                          : cObject
                          )
                      → λ(b : cObject)
                      → λ(e : cObject)
                      → λ ( eq
                          : ./../Eq/Type sha256:16ec0250d1cd6f2d48bb5fe37d46d1db9ef640657c7b247b8d5be1aca30259b1
                            (f e)
                          )
                      → λ(fn : c.arrow { _1 = b, _2 = e })
                      → λ(gn : c.arrow { _1 = a, _2 = b })
                      → ./../Eq/eqfn sha256:6c0871046404917eb6fa8b4177f76d4a33aad3eeb86ee5422abf565ac851805f
                        (f a)
                        (f e)
                        eq
                        ( functor.map
                          a
                          e
                          ( cCategory.op
                            { _1 = a, _2 = e }
                            (   λ(r : Type)
                              → λ ( arrowsOut
                                  :   ∀(z : cObject)
                                    → c.arrow { _1 = z, _2 = e }
                                    → c.arrow { _1 = a, _2 = z }
                                    → r
                                  )
                              → arrowsOut b fn gn
                            )
                          )
                        )
                        ( dCategory.op
                          { _1 = f a, _2 = f e }
                          (   λ(r : Type)
                            → λ ( arrowsOut
                                :   ∀(z : dObject)
                                  → d.arrow { _1 = z, _2 = f e }
                                  → d.arrow { _1 = f a, _2 = z }
                                  → r
                                )
                            → arrowsOut
                              (f b)
                              (functor.map b e fn)
                              (functor.map a b gn)
                          )
                        )
                  }
