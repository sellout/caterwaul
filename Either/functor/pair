let kCat =
      ./../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let base =
      ./../../Category/Monoidal/extractCategory sha256:936b393338b8dcf60af6c25ecea2b0b02d83e18acfed60ff736754fe0c1d7b3d
      kCat

let vObject = Type

let v =
      ./../../Category/Monoidal/Cartesian/extractMonoidal sha256:25afdf2818357f9c4b9dac6652b82e730472c389a634f8417a6014d39c7cddc0
      kCat
      Type
      vObject
      ./../../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

let Set =
      ./../../Category/Rig/extractAdditive sha256:868060f11fb386ceaa98cb7dc5d6da8b7ddcde2c9674da7ce9f0e598269c2004
      kCat
      vObject
      Type
      ./../../Category/Set/rig sha256:11dbf023e35a2fb89e364023c53cf9f99bb3fd25f3b650b3b925595e01049669

let cat = base vObject Type Set

in    λ ( m
        : Type → Type
        )
    → λ ( functor
        : ./../../Functor/Endo/Type sha256:158c6ae27571d27adefd3b94b6b9ce3ed48e1130d406ec72c62ccadcf931dcd0
          vObject
          Type
          (base Type vObject v)
          cat
          m
        )
    →   { map =
              λ(a : { _1 : Type, _2 : Type })
            → λ(b : { _1 : Type, _2 : Type })
            → λ(f : { _1 : a._1 → m b._1, _2 : a._2 → m b._2 })
            → λ(e : Set.op a)
            → let E = Set.op b
              
              in  merge
                  { Left =
                      λ(x : a._1) → functor.map b._1 (Set.op b) E.Left (f._1 x)
                  , Right =
                      λ(x : a._2) → functor.map b._2 (Set.op b) E.Right (f._2 x)
                  }
                  e
        }
      : ./../../Functor/Pair/Type sha256:7d67d4be164e26fc2ddc886d57887d14d55e6ab9a925f3189cfd1be5c5aedf6f
        vObject
        Type
        v
        ( ./../../Category/Kleisli/category sha256:305a4efbaafe53c64977af42c8d0be72f689442060a575282f9d31d19ad974ca
          vObject
          Type
          cat
          m
        )
        Set.op
