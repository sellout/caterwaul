let kCat = ./../Cat/semigroupal

let vObject = Type

in    λ(object : Kind)
    → λ(cat : ./Kind kCat vObject object)
    → let additive = ./extractAdditive kCat vObject object cat
      
      let multiplicative = ./extractMultiplicative kCat vObject object cat
      
      in  { swap :
                ∀(a : object)
              → ∀(b : object)
              → ∀(c : object)
              → ∀(d : object)
              → cat.arrow
                { _1 =
                    additive.product
                    { _1 =
                        multiplicative.product { _1 = a, _2 = b }
                    , _2 =
                        multiplicative.product { _1 = c, _2 = d }
                    }
                , _2 =
                    multiplicative.product
                    { _1 =
                        additive.product { _1 = a, _2 = c }
                    , _2 =
                        additive.product { _1 = b, _2 = d }
                    }
                }
          , split :
              cat.arrow
              { _1 =
                  additive.unit
              , _2 =
                  multiplicative.product
                  { _1 = additive.unit, _2 = additive.unit }
              }
          , combine :
              cat.arrow
              { _1 =
                  additive.product
                  { _1 = multiplicative.unit, _2 = multiplicative.unit }
              , _2 =
                  multiplicative.unit
              }
          , switch :
              cat.arrow { _1 = additive.unit, _2 = multiplicative.unit }
          , additive :
              ./../Monoidal/Laws object additive
          , multiplicative :
              ./../Monoidal/Laws object multiplicative
          }
