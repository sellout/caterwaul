let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

in    λ(object : Kind)
    → λ(cat : ./Kind kArrow kProduct object)
    → let Isomorphism = ./../../Isomorphism/Type object cat.arrow
      
      in    { leftIdentity :
                  ∀(a : object)
                → Isomorphism
                  { _1 = cat.op { _1 = cat.identity, _2 = a }, _2 = a }
            , rightIdentity :
                  ∀(a : object)
                → Isomorphism
                  { _1 = cat.op { _1 = a, _2 = cat.identity }, _2 = a }
            }
          ⩓ ./../Semigroupal/Laws
            object
            (./extractSemigroupal kArrow kProduct object cat)
