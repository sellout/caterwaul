let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(cCategory : ./../Category/Type cObject cArrow)
    → λ(dObject : Kind)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    →   { map =
              λ(a : { _1 : cObject, _2 : dObject })
            → λ(b : { _1 : cObject, _2 : dObject })
            → λ ( f
                : { _1 :
                      cArrow { _1 = a._1, _2 = b._1 }
                  , _2 :
                      dArrow { _1 = a._2, _2 = b._2 }
                  }
                )
            → f._1
        }
      : ./../Functor/Bifunctor/Type
        cObject
        dObject
        cObject
        cArrow
        dArrow
        cArrow
        (./Type cObject dObject)
