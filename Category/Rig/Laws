let kCat =
      ./../Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./Kind sha256:f81dfc0c5d6068531dea30420720beec80a7cd1d0481cfb44fc9fecb3c35611a
          kCat
          vObject
          object
        )
    → let Isomorphism =
            ./../../Isomorphism/Type sha256:aa416af42a745ed47476a9aa736340f4346442177a2396f368ba9659d2a23ad9
            object
            ( ./extractCategory sha256:7c0bcbd29731e19cbfd3c760c60f9e54eb85815bee92a9580f97899825951d88
              kCat
              vObject
              object
              cat
            )
      
      let additive =
            ./extractAdditive sha256:7f197abeac966ef17fd2c847e0fd4a0c52630e55833e090537b494818a6e3ef5
            kCat
            vObject
            object
            cat
      
      let multiplicative =
            ./extractMultiplicative sha256:5e6489a35a0eef6ac23ed4078707105247c59293c3a8dc6791c405f10b653859
            kCat
            vObject
            object
            cat
      
      in  { distributivity :
                ∀(a : object)
              → ∀(b : object)
              → ∀(c : object)
              → Isomorphism
                { _1 =
                    multiplicative.product
                    { _1 = a, _2 = additive.product { _1 = b, _2 = c } }
                , _2 =
                    additive.product
                    { _1 =
                        multiplicative.product { _1 = a, _2 = b }
                    , _2 =
                        multiplicative.product { _1 = a, _2 = c }
                    }
                }
          , leftAnnihilation :
                ∀(a : object)
              → Isomorphism
                { _1 =
                    multiplicative.product { _1 = additive.unit, _2 = a }
                , _2 =
                    additive.unit
                }
          , rightAnnihilation :
                ∀(a : object)
              → Isomorphism
                { _1 =
                    multiplicative.product { _1 = a, _2 = additive.unit }
                , _2 =
                    additive.unit
                }
          , additive :
              ./../Monoidal/Laws sha256:dd8763fe3be580db2ad354d975171a48ac32a3790efc7bf3870717cc6d679739
              object
              additive
          , multiplicative :
              ./../Monoidal/Laws sha256:dd8763fe3be580db2ad354d975171a48ac32a3790efc7bf3870717cc6d679739
              object
              multiplicative
          }
