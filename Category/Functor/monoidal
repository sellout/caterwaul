{- This cheats a bit on the identity, since `dObject` is Type, we don‚Äôt need a
   functor **Set** ‚Üí ùíü.
-}
let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let MonoidalCategory = ./../Monoidal/Kind kArrow kProduct

in    Œª(cObject : Kind)
    ‚Üí let dObject = Type
      
      in    Œª(c : MonoidalCategory cObject)
          ‚Üí Œª(d : MonoidalCategory dObject)
          ‚Üí   { constraint =
                  ./../../Functor/Type cObject dObject c.arrow d.arrow
              , arrow =
                  ./../../NaturalTransformation/Type cObject dObject d.arrow
              , identity =
                  Œª(x : cObject) ‚Üí c.arrow { _1 = c.identity, _2 = x }
              , op =
                  ./../../Day/Type cObject c d
              }
            : MonoidalCategory (kArrow cObject dObject)
