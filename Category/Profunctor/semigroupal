{- This doesn’t use `extractSemigroupal` because I don’t know how to apply the
  `morphism` in the monoidal category instance.
-}
let kCat =
      ./../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../../Category/Monoidal/Kind sha256:96b5eca83adb85b7bc744975b530210da2aec17c9c70b45d3b241ccfdb47e772
          kCat
          Type
          vObject
        )
    → λ ( cat
        : ./../Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          kCat
          vObject
          object
        )
    → let profunctor =
            kCat.arrow (kCat.product object object) vObject
      
      in    { constraint =
                ./../../Functor/Profunctor/Type sha256:e47d2dd146c4c8665da2d6f5363fd37ff59971aaa354bfa1f1be9fca965ce307
                object
                object
                v
                cat
                cat
            , arrow =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → ∀(a : { _1 : object, _2 : object }) → p._1 a → p._2 a
            , product =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → λ(a : { _1 : object, _2 : object })
                →   ∀(r : Type)
                  → (   ∀(z : object)
                      → p._1 { _1 = z, _2 = a._2 }
                      → p._2 { _1 = a._1, _2 = z }
                      → r
                    )
                  → r
            }
          : ./../Semigroupal/Kind sha256:5d216a5d95721e6086fab2cd85f039d15a9d06b8a986ef170823a57a0c0d02d6
            kCat
            vObject
            profunctor
