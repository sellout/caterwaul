let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( cObject
        : Kind
        )
    → λ(dObject : Kind)
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:6eb37e632903173c5ec1600564aa614697c4b58719773c4e4c66a76f095d1636
          cat
          Type
          vObject
        )
    → λ ( c
        : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          vObject
          cObject
        )
    → λ ( d
        : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          cat
          vObject
          dObject
        )
    → λ(f : cat.arrow (cat.product dObject cObject) Type)
    →   { lmap :
            let op =
                  ./../Category/Op/Kind sha256:e098dd6a242e1c53f07ac907a04e6196a2d8055fe8e95650872a5b89ff60c7b4
                  vObject
                  dObject
                  d
            
            in    ∀(h : dObject)
                → ∀(i : dObject)
                → ∀(j : cObject)
                → op.arrow { _1 = h, _2 = i }
                → f { _1 = h, _2 = j }
                → f { _1 = i, _2 = j }
        , rmap :
              ∀(h : dObject)
            → ∀(i : cObject)
            → ∀(j : cObject)
            → c.arrow { _1 = i, _2 = j }
            → f { _1 = h, _2 = i }
            → f { _1 = h, _2 = j }
        }
      ⩓ ./../Functor/Profunctor/Type sha256:cb60a14dd70d9116c64424b1368414ce44a425a238a17bf79efed6251fd8d13f
        cObject
        dObject
        v
        c
        d
        f
