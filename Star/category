let kArrow = ./../Function/Kind

let kProduct = ./../Tuple/Kind

let vObject = Type

let v = ./../Category/Set/monoidal/cartesian

let vBase =
      ./../Category/Monoidal/extractCategory kArrow kProduct Type vObject v

in    λ(object : Kind)
    → λ(cat : ./../Category/Kind kArrow kProduct vObject object)
    → λ(semigroupoid : ./../Semigroupoid/Type object v cat cat.arrow)
    → λ(m : kArrow object object)
    → let star = ./../Category/Kleisli/category vObject object cat m
      
      in    λ(functor : ./../Functor/Endo/Type vObject object vBase cat m)
          → λ(monad : ./../Monad/Type object cat m)
          → let bind =
                  ( ./../Monad/impliedStarfunctor
                    object
                    cat
                    semigroupoid
                    m
                    functor
                    monad
                  ).map
            
            in    { identity =
                      monad.identity
                  , op =
                        λ(a : { _1 : object, _2 : object })
                      → λ ( p
                          :   ∀(r : Type)
                            → (   ∀(z : object)
                                → star.arrow { _1 = z, _2 = a._2 }
                                → star.arrow { _1 = a._1, _2 = z }
                                → r
                              )
                            → r
                          )
                      → semigroupoid.op
                        { _1 = a._1, _2 = m a._2 }
                        (   λ(r : Type)
                          → λ ( arrowsOut
                              :   ∀(z : object)
                                → cat.arrow { _1 = z, _2 = m a._2 }
                                → cat.arrow { _1 = a._1, _2 = z }
                                → r
                              )
                          → p
                            r
                            (   λ(z : object)
                              → λ(f : star.arrow { _1 = z, _2 = a._2 })
                              → λ(g : star.arrow { _1 = a._1, _2 = z })
                              → arrowsOut (m z) (bind z a._2 f) g
                            )
                        )
                  }
                : ./../Category/Type object v star
