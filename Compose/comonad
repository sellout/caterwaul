let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./../Category/Monoidal/Cartesian/extractCategory sha256:fe359f472fbc38300f29f9f50522e2e23d0bb16034bc98c93265a1f5aeb01349
      cat
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

let Category =
      ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
      cat
      vObject

in    λ ( cObject
        : Kind
        )
    → λ(c : Category cObject)
    → λ(dObject : Kind)
    → λ(d : Category dObject)
    → λ(f : cat.arrow dObject cObject)
    → λ ( fFunctor
        : ./../Functor/Type sha256:bebd999f32d6a3fd9bd7151ca5f0942ed6aeded30809c4a7e6c91382bed2dbcb
          vObject
          dObject
          cObject
          v
          d
          c
          f
        )
    → λ(g : cat.arrow cObject dObject)
    → λ ( adjunction
        : ./../Adjunction/Type sha256:9f462ba882ff165dc54ad4130625161af51d1df5530cfc925150f18ba4f24f25
          cObject
          dObject
          c
          d
          f
          g
        )
    →   { identity =
            adjunction.counit
        , op =
              λ(a : cObject)
            → fFunctor.map (g a) (g (f (g a))) (adjunction.unit (g a))
        }
      : ./../Comonad/Type sha256:d13db9e0b984aa3ad4e658ae2574973a4a477d0f8ca3b88c3b5a79d0799536c8
        cObject
        c
        ( ./Type sha256:e830545569ce8ba04d3124a7ca93994fc93e18c0372616f45910253f0a00907d
          cObject
          dObject
          cObject
          { _1 = f, _2 = g }
        )
