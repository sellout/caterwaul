{- NB: This is defined in terms of the monoidal categories instead of the other
       way around because this is more restrictive than either monoidal
       category.
     • Applicative requires that the target category is **Set** and
     • monadic requires an endofunctor`object`.
       When you combine these two restrictions, you end up only being able to
       support endofunctors in **Set**.
-}
let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let object = Type

in    λ(cat : ./../../Category/Monoidal/Kind kArrow kProduct object)
    → let applicative = ./../Functor/monoidal object cat cat
      
      let monadic = ./monoidal/monadic object cat.arrow
      
      in    { constraint =
                monadic.constraint
            , arrow =
                applicative.arrow
            , additive =
                { identity = applicative.identity, op = applicative.op }
            , multiplicative =
                { identity = monadic.identity, op = monadic.op }
            }
          : ./../Duoidal/Kind kArrow kProduct (kArrow object object)
