{- This doesn’t use `extractSemigroupal` because I don’t know how to apply the
  `morphism` in the monoidal category instance.
-}
let kCat =
      ./../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../../Category/Monoidal/Kind sha256:6eb37e632903173c5ec1600564aa614697c4b58719773c4e4c66a76f095d1636
          kCat
          Type
          vObject
        )
    → λ ( cat
        : ./../Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          kCat
          vObject
          object
        )
    → let profunctor =
            kCat.arrow (kCat.product object object) vObject
      
      in    { constraint =
                ./../../Functor/Profunctor/Type sha256:cb60a14dd70d9116c64424b1368414ce44a425a238a17bf79efed6251fd8d13f
                object
                object
                v
                cat
                cat
            , arrow =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → ∀(a : { _1 : object, _2 : object }) → p._1 a → p._2 a
            , op =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → λ(a : { _1 : object, _2 : object })
                →   ∀(r : Type)
                  → (   ∀(z : object)
                      → p._1 { _1 = z, _2 = a._2 }
                      → p._2 { _1 = a._1, _2 = z }
                      → r
                    )
                  → r
            }
          : ./../Semigroupal/Kind sha256:e76288137b213da343b09207c0c8a72bd551a21712d3d7f2089342e1968ba699
            kCat
            vObject
            profunctor
