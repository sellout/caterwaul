{- For any rig category ùíû, any ùíû-valued functor category is a rig category in
   the same way by ‚Äúlifting‚Äù the rig structure of ùíû.
-}
let cat = ./../Cat/semigroupal

let vObject = Type

let Category = ./../Kind cat

let RigCategory = ./../Rig/Kind cat

in    Œª(cObject : Kind)
    ‚Üí let dObject = Type
      
      in    Œª(v : Category Type vObject)
          ‚Üí Œª(c : Category vObject cObject)
          ‚Üí Œª(d : RigCategory vObject dObject)
          ‚Üí let base = ./../Rig/extractCategory cat vObject
            
            let object = cat.arrow cObject dObject
            
            in      { additive =
                        { unit =
                              Œª(x : cObject)
                            ‚Üí ./../../Functor/Constant/Type
                              dObject
                              cObject
                              { _1 = d.additive.unit, _2 = x }
                        , product =
                              Œª(f : { _1 : object, _2 : object })
                            ‚Üí Œª(x : cObject)
                            ‚Üí d.additive.product { _1 = f._1 x, _2 = f._2 x }
                        }
                    , multiplicative =
                        { unit =
                              Œª(x : cObject)
                            ‚Üí ./../../Functor/Constant/Type
                              dObject
                              cObject
                              { _1 = d.multiplicative.unit, _2 = x }
                        , product =
                              Œª(f : { _1 : object, _2 : object })
                            ‚Üí Œª(x : cObject)
                            ‚Üí d.multiplicative.product
                              { _1 = f._1 x, _2 = f._2 x }
                        }
                    }
                  ‚àß ./category cObject dObject v c (base dObject d)
                : RigCategory vObject object
