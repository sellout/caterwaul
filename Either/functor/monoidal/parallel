let kCat =
      ./../../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./../../../Category/Monoidal/Cartesian/extractCategory sha256:5d481c2c40201add9d14edc5a5ff6471a11fa9c58fea348279927339cfd60456
      kCat
      Type
      vObject
      ./../../../Category/Set/monoidal/cartesian sha256:3a79a17d1c39a3df58efcc62fd96a2da0147bb29b524f57aa7c35942f653f164

let object = Type

let Set =
      ./../../../Category/Set/rig sha256:a7cbfba2e5127e953bcfa00748bcedb7daef637f931d7bce2ac14a21b103b8b8

let cat =
      ./../../../Category/Rig/extractMultiplicative sha256:5e6489a35a0eef6ac23ed4078707105247c59293c3a8dc6791c405f10b653859
      kCat
      vObject
      object
      Set

let Semigroup =
      ./../../../Semigroup/Type sha256:c141f4fb3c393804963be5ed72ffe07f5a7e90f588ead9065235240815a80c88
      object
      ( ./../../../Category/Monoidal/extractSemigroupal sha256:aae542624e23cbcccf4d3331b84d3ff664b425e0e186fead04853f01637a1e9c
        kCat
        vObject
        object
        cat
      )

in    λ ( a
        : object
        )
    → λ(semigroup : Semigroup a)
    →     ./../endo/star sha256:9f74274640aef99ef8699114923430c92f13520649749201acdf5af5cc220ca9
          ( ./../../../Identity/Type sha256:0d22fa254c96551228894f2adaedd4f45c0401759d18775e412ae41694f1d3e0
            object
          )
          ./../../../Identity/functor/monoidal sha256:4805c7ad013fa87550f2dcfe1db22d3bbfd7e18ef37a53ecfff9b73ea23d0caa
          a
        ∧ { unit =
                λ(b : object)
              → λ(fn : Set.arrow { _1 = Set.multiplicative.unit, _2 = b })
              → < Right = fn {=} | Left : a >
          , product =
                λ(i : object)
              → λ ( day
                  :   ∀(r : Type)
                    → (   ∀(d : { _1 : object, _2 : object })
                        → Set.arrow
                          { _1 = Set.multiplicative.product d, _2 = i }
                        → { _1 :
                              Set.additive.product { _1 = a, _2 = d._1 }
                          , _2 :
                              Set.additive.product { _1 = a, _2 = d._2 }
                          }
                        → r
                      )
                    → r
                  )
              → day
                (Set.additive.product { _1 = a, _2 = i })
                (   λ(p : { _1 : object, _2 : object })
                  → λ ( fn
                      : Set.arrow { _1 = Set.multiplicative.product p, _2 = i }
                      )
                  → λ ( args
                      : { _1 :
                            Set.additive.product { _1 = a, _2 = p._1 }
                        , _2 :
                            Set.additive.product { _1 = a, _2 = p._2 }
                        }
                      )
                  → merge
                    { Left =
                          λ(l : a)
                        → merge
                          { Left =
                                λ(ll : a)
                              → < Left =
                                    semigroup.product { _1 = l, _2 = ll }
                                | Right :
                                    i
                                >
                          , Right =
                              λ(_ : p._2) → < Left = l | Right : i >
                          }
                          args._2
                    , Right =
                          λ(f : Set.arrow { _1 = p._2, _2 = i })
                        → merge
                          { Left =
                              λ(x : a) → < Left = x | Right : i >
                          , Right =
                              λ(x : p._2) → < Right = f x | Left : a >
                          }
                          args._2
                    }
                    ( merge
                      { Left =
                          λ(x : a) → < Left = x | Right : p._2 → i >
                      , Right =
                            λ(x : p._1)
                          → < Right =
                                λ(y : p._2) → fn { _1 = x, _2 = y }
                            | Left :
                                a
                            >
                      }
                      args._1
                    )
                )
          }
      : ./../../../Functor/Monoidal/Type sha256:bf8111231d2f34c80be8863044f587a617c364172c46684ce6480c5c96764e74
        object
        v
        cat
        cat
        (λ(b : object) → Set.additive.product { _1 = a, _2 = b })
