let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./../Category/Monoidal/Kind sha256:c90d64b23bd9269a630ed0e3c5202fef1969034543a57c20db10215d7092fe22
          kArrow
          kProduct
          object
        )
    → λ ( category
        : ./../Category/Type sha256:56874495587bd8bf58b702382562e4aed91603b64a2d6893413c72d5bf265596
          object
          cat.arrow
        )
    → λ ( bifunctor
        : ./../Functor/Bifunctor/Type sha256:941c217fa6ee86da9597e1a86270a67bb1c9d62fe62f6d786fe6454a05fd72fa
          object
          object
          object
          cat.arrow
          cat.arrow
          cat.arrow
          cat.op
        )
    → λ(m : object)
    → λ ( group
        : ./Type sha256:85e3cfd09df263fe9c3f4c4b97633f9613d96c42075c18416eb6da89f0945b47
          object
          cat
          m
        )
    → category.op
      { _1 = cat.op { _1 = m, _2 = m }, _2 = m }
      (   λ ( r
            : Type
            )
        → λ ( arrowsOut
            :   ∀(z : object)
              → cat.arrow { _1 = z, _2 = m }
              → cat.arrow { _1 = cat.op { _1 = m, _2 = m }, _2 = z }
              → r
            )
        → arrowsOut
          (cat.op { _1 = m, _2 = m })
          group.op
          ( ( ./../Functor/Bifunctor/impliedSecondFunctor sha256:2a8c40efa835aa1a550c19aa97151f5e29de03f59bad6add6d10872a5e97f540
              object
              cat.arrow
              category
              object
              cat.arrow
              object
              cat.arrow
              cat.op
              bifunctor
              m
            ).map
            m
            m
            group.inverse
          )
      )
