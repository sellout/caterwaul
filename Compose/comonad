let cat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./../Category/Monoidal/Cartesian/extractCategory sha256:fef093587bdc97a914e4e30469579c22f8fb63653ea5f511606e0e8109662a4b
      cat
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:b6efbdc0effbca1bc7427c980f2579012808494a8195fdf9fb52aea37ae91116

let Category =
      ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
      cat
      vObject

in    λ ( cObject
        : Kind
        )
    → λ(c : Category cObject)
    → λ(dObject : Kind)
    → λ(d : Category dObject)
    → λ(f : cat.arrow dObject cObject)
    → λ ( fFunctor
        : ./../Functor/Type sha256:bebd999f32d6a3fd9bd7151ca5f0942ed6aeded30809c4a7e6c91382bed2dbcb
          vObject
          dObject
          cObject
          v
          d
          c
          f
        )
    → λ(g : cat.arrow cObject dObject)
    → λ ( adjunction
        : ./../Adjunction/Type sha256:9f462ba882ff165dc54ad4130625161af51d1df5530cfc925150f18ba4f24f25
          cObject
          dObject
          c
          d
          f
          g
        )
    →   { identity =
            adjunction.counit
        , product =
              λ(a : cObject)
            → fFunctor.map (g a) (g (f (g a))) (adjunction.unit (g a))
        }
      : ./../Comonad/Type sha256:6ddfa25c10ab6487474f62a2f4962d2a1ea8d2ef42a646a14add738717e861bf
        cObject
        c
        ( ./Type sha256:e830545569ce8ba04d3124a7ca93994fc93e18c0372616f45910253f0a00907d
          cObject
          dObject
          cObject
          { _1 = f, _2 = g }
        )
