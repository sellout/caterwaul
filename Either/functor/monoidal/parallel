let kCat =
      ./../../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./../../../Category/Monoidal/Cartesian/extractCategory sha256:fe359f472fbc38300f29f9f50522e2e23d0bb16034bc98c93265a1f5aeb01349
      kCat
      Type
      vObject
      ./../../../Category/Set/monoidal/cartesian sha256:48e8bea552638624a62335eab92acd1e0a04c28e8a0d8fe1c8974565065a9576

let object = Type

let Set =
      ./../../../Category/Set/rig sha256:11dbf023e35a2fb89e364023c53cf9f99bb3fd25f3b650b3b925595e01049669

let cat =
      ./../../../Category/Rig/extractMultiplicative sha256:fef92f72e30bf84551fae14ba281414b952d166146fc061b212ea3c0afef650d
      kCat
      vObject
      object
      Set

let Semigroup =
      ./../../../Semigroup/Type sha256:9c2ee52a412e914e1716a0b3210be32af44993029f703a15b183a3b0cce9002c
      object
      ( ./../../../Category/Monoidal/extractSemigroupal sha256:8fc720d6416e099e6943afa14eefa7bb86489af66eea29c4d5c9e11eab9c6808
        kCat
        vObject
        object
        cat
      )

in    λ ( a
        : object
        )
    → λ(semigroup : Semigroup a)
    →     ./../endo/star sha256:714ba5c1401929dc0a33a3e319f65fe17dfdc7b0d896b3d022572b39f0bf1091
          ( ./../../../Identity/Type sha256:0d22fa254c96551228894f2adaedd4f45c0401759d18775e412ae41694f1d3e0
            object
          )
          ./../../../Identity/functor/monoidal sha256:c7b7bb7632523da1fcea63ad5d4c29fd51abf5f4464995b5e10621807fdecc1b
          a
        ∧ { identity =
                λ(b : object)
              → λ(fn : Set.arrow { _1 = Set.multiplicative.identity, _2 = b })
              → < Right = fn {=} | Left : a >
          , op =
                λ(i : object)
              → λ ( day
                  :   ∀(r : Type)
                    → (   ∀(d : { _1 : object, _2 : object })
                        → Set.arrow { _1 = Set.multiplicative.op d, _2 = i }
                        → { _1 :
                              Set.additive.op { _1 = a, _2 = d._1 }
                          , _2 :
                              Set.additive.op { _1 = a, _2 = d._2 }
                          }
                        → r
                      )
                    → r
                  )
              → day
                (Set.additive.op { _1 = a, _2 = i })
                (   λ(p : { _1 : object, _2 : object })
                  → λ(fn : Set.arrow { _1 = Set.multiplicative.op p, _2 = i })
                  → λ ( args
                      : { _1 :
                            Set.additive.op { _1 = a, _2 = p._1 }
                        , _2 :
                            Set.additive.op { _1 = a, _2 = p._2 }
                        }
                      )
                  → merge
                    { Left =
                          λ(l : a)
                        → merge
                          { Left =
                                λ(ll : a)
                              → < Left =
                                    semigroup.op { _1 = l, _2 = ll }
                                | Right :
                                    i
                                >
                          , Right =
                              λ(_ : p._2) → < Left = l | Right : i >
                          }
                          args._2
                    , Right =
                          λ(f : Set.arrow { _1 = p._2, _2 = i })
                        → merge
                          { Left =
                              λ(x : a) → < Left = x | Right : i >
                          , Right =
                              λ(x : p._2) → < Right = f x | Left : a >
                          }
                          args._2
                    }
                    ( merge
                      { Left =
                          λ(x : a) → < Left = x | Right : p._2 → i >
                      , Right =
                            λ(x : p._1)
                          → < Right =
                                λ(y : p._2) → fn { _1 = x, _2 = y }
                            | Left :
                                a
                            >
                      }
                      args._1
                    )
                )
          }
      : ./../../../Functor/Monoidal/Type sha256:7d4a68165b33b76bf9e8d8ab6fc8739699a1260549ebee624e57d8cab06f97c0
        object
        v
        cat
        cat
        (λ(b : object) → Set.additive.op { _1 = a, _2 = b })
