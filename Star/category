let kCat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let v =
      ./../Category/Monoidal/Cartesian/extractMonoidal sha256:8112e73d82fd63e4e8bb5628a8cea43f92518a02e56ad351c7f9558546e7f81a
      kCat
      Type
      vObject
      ./../Category/Set/monoidal/cartesian sha256:3a79a17d1c39a3df58efcc62fd96a2da0147bb29b524f57aa7c35942f653f164

let vBase =
      ./../Category/Monoidal/extractCategory sha256:c9807a603a6bd9f0ef13debb0f11e63d6f7133870fef175f27d08dd81c2ff695
      kCat
      Type
      vObject
      v

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./../Category/Kind sha256:c73426d12cddcdfc44b6e687fc897f7ef91fcda0c4da116a91acdca4d15c68a2
          kCat
          vObject
          object
        )
    → λ ( semigroupoid
        : ./../Semigroupoid/Type sha256:40a8e489fddee04bb4fda6df908b24c2143a7f75b4c5e25eec9fd34e7947bbb8
          object
          v
          cat
          cat.arrow
        )
    → λ(m : kCat.arrow object object)
    → let star =
            ./../Category/Kleisli/category sha256:305a4efbaafe53c64977af42c8d0be72f689442060a575282f9d31d19ad974ca
            vObject
            object
            cat
            m
      
      in    λ ( functor
              : ./../Functor/Endo/Type sha256:158c6ae27571d27adefd3b94b6b9ce3ed48e1130d406ec72c62ccadcf931dcd0
                vObject
                object
                vBase
                cat
                m
              )
          → λ ( monad
              : ./../Monad/Type sha256:f29e46a0fad45deefe74dbaf6daf7ff1abaaf7b02d672dfc254245ebc0cd651a
                object
                cat
                m
              )
          → let bind =
                  ( ./../Monad/impliedStarfunctor sha256:072a0dfab807d859a0edd17ea79a7ab65a3e5e502105bf0379b1267181aa6e33
                    object
                    cat
                    semigroupoid
                    m
                    functor
                    monad
                  ).map
            
            in    { unit =
                      monad.unit
                  , product =
                        λ(a : { _1 : object, _2 : object })
                      → λ ( p
                          :   ∀(r : Type)
                            → (   ∀(z : object)
                                → star.arrow { _1 = z, _2 = a._2 }
                                → star.arrow { _1 = a._1, _2 = z }
                                → r
                              )
                            → r
                          )
                      → semigroupoid.product
                        { _1 = a._1, _2 = m a._2 }
                        (   λ(r : Type)
                          → λ ( arrowsOut
                              :   ∀(z : object)
                                → cat.arrow { _1 = z, _2 = m a._2 }
                                → cat.arrow { _1 = a._1, _2 = z }
                                → r
                              )
                          → p
                            r
                            (   λ(z : object)
                              → λ(f : star.arrow { _1 = z, _2 = a._2 })
                              → λ(g : star.arrow { _1 = a._1, _2 = z })
                              → arrowsOut (m z) (bind z a._2 f) g
                            )
                        )
                  }
                : ./../Category/Type sha256:3983e08568dd06043567236a0b0ceb489d34346ea7cc29bd9c4d98bd567e03b9
                  object
                  v
                  star
