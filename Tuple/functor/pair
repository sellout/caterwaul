let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let vObject = Type

let v = ./../../Category/Set/monoidal/cartesian

let setObject = Type

let Set = ./../../Category/Set/monoidal/cartesian

let base =
      ./../../Category/Monoidal/extractCategory
      kArrow
      kProduct
      vObject
      setObject
      Set

in    { map =
            λ(a : { _1 : setObject, _2 : setObject })
          → λ(b : { _1 : setObject, _2 : setObject })
          → λ(f : { _1 : a._1 → b._1, _2 : a._2 → b._2 })
          → λ(t : Set.op a)
          → { _1 = f._1 t._1, _2 = f._2 t._2 }
      }
    : ./../../Functor/Pair/Type vObject setObject v base Set.op
