{- Leibniz equality forms a groupoid, with
 ‚Ä¢ unit = reflexivity,
 ‚Ä¢ product = transitivity, and
 ‚Ä¢ inverse = symmetry.

   FIXME: The implementation of `inverse` forces the target of the functor to be
          the enriching category. I don‚Äôt know if this is fundamentally
          required, or just a consequence of the common formulations being where
          everything is ùêíùêûùê≠.
-}
let cat = ./../Category/Cat/semigroupal

let vObject = Type

let v =
      ./../Category/Monoidal/Cartesian/extractMonoidal
      cat
      Type
      vObject
      ./../Category/Set/monoidal/cartesian

in    Œª(cObject : Kind)
    ‚Üí Œª(c : ./../Category/Kind cat vObject cObject)
    ‚Üí let dObject = vObject
      
      let d = ./../Category/Monoidal/extractCategory cat Type dObject v
      
      in    Œª(dCategory : ./../Category/Type dObject v d)
          ‚Üí let Leibniz = ./Kind cObject dObject c d
            
            let refl =
                    Œª(a : cObject)
                  ‚Üí Œª(f : cat.arrow cObject dObject)
                  ‚Üí dCategory.unit (f a)
            
            let trans =
                    Œª(a : { _1 : cObject, _2 : cObject })
                  ‚Üí Œª ( p
                      :   ‚àÄ(r : Type)
                        ‚Üí (   ‚àÄ(z : cObject)
                            ‚Üí Leibniz.arrow { _1 = z, _2 = a._2 }
                            ‚Üí Leibniz.arrow { _1 = a._1, _2 = z }
                            ‚Üí r
                          )
                        ‚Üí r
                      )
                  ‚Üí Œª(f : cat.arrow cObject dObject)
                  ‚Üí dCategory.product
                    { _1 = f a._1, _2 = f a._2 }
                    (   Œª(r : Type)
                      ‚Üí Œª ( arrowsOut
                          :   ‚àÄ(z : dObject)
                            ‚Üí d.arrow { _1 = z, _2 = f a._2 }
                            ‚Üí d.arrow { _1 = f a._1, _2 = z }
                            ‚Üí r
                          )
                      ‚Üí p
                        r
                        (   Œª(z : cObject)
                          ‚Üí Œª(g : Leibniz.arrow { _1 = z, _2 = a._2 })
                          ‚Üí Œª(h : Leibniz.arrow { _1 = a._1, _2 = z })
                          ‚Üí arrowsOut (f z) (g f) (h f)
                        )
                    )
            
            in    { unit =
                      refl
                  , product =
                      trans
                  , hom =
                      { map =
                            Œª(a : cat.product cObject cObject)
                          ‚Üí Œª(b : cat.product cObject cObject)
                          ‚Üí Œª ( f
                              : v.product
                                { _1 =
                                    Leibniz.arrow { _1 = b._1, _2 = a._1 }
                                , _2 =
                                    Leibniz.arrow { _1 = a._2, _2 = b._2 }
                                }
                              )
                          ‚Üí Œª(fn : Leibniz.arrow a)
                          ‚Üí trans
                            { _1 = b._1, _2 = b._2 }
                            (   Œª(r : Type)
                              ‚Üí Œª ( arrowsOut
                                  :   ‚àÄ(z : cObject)
                                    ‚Üí Leibniz.arrow { _1 = z, _2 = b._2 }
                                    ‚Üí Leibniz.arrow { _1 = b._1, _2 = z }
                                    ‚Üí r
                                  )
                              ‚Üí arrowsOut
                                a._1
                                ( trans
                                  { _1 = a._1, _2 = b._2 }
                                  (   Œª(r : Type)
                                    ‚Üí Œª ( arrowsOut
                                        :   ‚àÄ(z : cObject)
                                          ‚Üí Leibniz.arrow { _1 = z, _2 = b._2 }
                                          ‚Üí Leibniz.arrow { _1 = a._1, _2 = z }
                                          ‚Üí r
                                        )
                                    ‚Üí arrowsOut a._2 f._2 fn
                                  )
                                )
                                f._1
                            )
                      }
                  , inverse =
                        Œª(a : cat.product cObject cObject)
                      ‚Üí Œª(subst : Leibniz.arrow a)
                      ‚Üí subst
                        (Œª(x : cObject) ‚Üí Leibniz.arrow { _1 = x, _2 = a._1 })
                        (refl a._1)
                  }
                : ./../Groupoid/Type cObject v Leibniz
