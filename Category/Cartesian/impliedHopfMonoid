{- Every group in a cartesian category is a Hopf monoid in a unique way. -}
let kCat =
      ./../../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let CartesianCategory =
      ./Type sha256:223ac3444e5e1fbce3fb19cebe82bd2879837b64e510fc5319c68ddf7ed7ab1b

let Group =
      ./../../Group/Type sha256:cac478dd8354b05c1af60acb85d82d4898c35cda2ea44ccf0b7cd61938c80c14

let extractMonoid =
      ./../../Group/extractMonoid sha256:4af2369ebfed14dd040a969eafa09413110ca5d2ee0dafa00ff261e96066d996

let HopfMonoid =
      ./../../Monoid/Hopf/Type sha256:3678f5df98153f870a20930560498c9a41e1c1f3f45354d79a8fabe851e26b3f

let MonoidalCategory =
      ./../Monoidal/Kind sha256:96b5eca83adb85b7bc744975b530210da2aec17c9c70b45d3b241ccfdb47e772
      kCat

let vObject = Type

in    λ ( object
        : Kind
        )
    → λ(v : MonoidalCategory Type vObject)
    → λ(cat : MonoidalCategory vObject object)
    → λ(m : object)
    → λ(cartesian : CartesianCategory object v cat m)
    → λ(group : Group object cat m)
    →     { antipode =
              group.inverse
          }
        ∧ ./impliedBimonoid sha256:448de62a21cfc4401e7653bccc41ab1dc96787ca5bc8f54d35e044d39a26abea
          object
          v
          cat
          m
          cartesian
          (extractMonoid object cat m group)
      : HopfMonoid object cat m
