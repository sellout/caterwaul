{-|

**NB**: Since this is currently forced to be in **Set**, it‚Äôs quite possible
that some of the uses of ùíû and ùíü are wrong, since the type system can‚Äôt
distinguish them. So take them with a grain of salt if you‚Äôre editing this file.

-}
let cat = ../../Category/Cat/semigroupal

let MonoidalFunctor = ../../Functor/Monoidal/Type

let base = ../../Category/Monoidal/Cartesian/extractMonoidal cat

let vObject = Type

in  Œª(cObject : Kind) ‚Üí
    Œª(v : ../../Category/Kind cat Type vObject) ‚Üí
    Œª ( vCategory
      : ../../Category/Type
          vObject
          (base vObject Type ../../Category/Set/monoidal/cartesian)
          v
      ) ‚Üí
    Œª(c : ../../Category/Monoidal/Kind cat vObject cObject) ‚Üí
      let Day/convolution = ../../Day/convolution

      let dObject = Type

      let d = base vObject dObject ../../Category/Set/monoidal/cartesian

      let eObject = Type

      let e = base vObject eObject ../../Category/Set/monoidal/cartesian

      let Compose = ../Type cObject dObject eObject

      let Day = ../../Day/Type cObject e c

      in  Œª(f : cat.arrow dObject eObject) ‚Üí
          Œª(fMonoidal : MonoidalFunctor dObject v d e f) ‚Üí
          Œª(g : cat.arrow cObject dObject) ‚Üí
          Œª(gMonoidal : MonoidalFunctor cObject v c d g) ‚Üí
              { map =
                  Œª(a : cObject) ‚Üí
                  Œª(b : cObject) ‚Üí
                    vCategory.product
                      { _1 = c.arrow { _1 = a, _2 = b }
                      , _2 = e.arrow { _1 = f (g a), _2 = f (g b) }
                      }
                      ( Œª(r : Type) ‚Üí
                        Œª ( arrowsOut
                          : ‚àÄ(z : vObject) ‚Üí
                            v.arrow
                              { _1 = z
                              , _2 = e.arrow { _1 = f (g a), _2 = f (g b) }
                              } ‚Üí
                            v.arrow
                              { _1 = c.arrow { _1 = a, _2 = b }, _2 = z } ‚Üí
                              r
                          ) ‚Üí
                          arrowsOut
                            (d.arrow { _1 = g a, _2 = g b })
                            (fMonoidal.map (g a) (g b))
                            (gMonoidal.map a b)
                      )
              , unit =
                  Œª(a : cObject) ‚Üí
                  Œª(fn : c.arrow { _1 = c.unit, _2 = a }) ‚Üí
                    fMonoidal.unit (g a) (Œª(_ : d.unit) ‚Üí gMonoidal.unit a fn)
              , product =
                  Œª(i : cObject) ‚Üí
                  Œª ( day
                    : Day
                        { _1 = Compose { _1 = f, _2 = g }
                        , _2 = Compose { _1 = f, _2 = g }
                        }
                        i
                    ) ‚Üí
                    day
                      (f (g i))
                      ( Œª(b : { _1 : cObject, _2 : cObject }) ‚Üí
                        Œª(fn : c.arrow { _1 = c.product b, _2 = i }) ‚Üí
                        Œª(a : { _1 : f (g b._1), _2 : f (g b._2) }) ‚Üí
                          fMonoidal.product
                            (g i)
                            ( Œª(fr : eObject) ‚Üí
                              Œª ( fDay
                                : Day/convolution dObject e d f f (g i) fr
                                ) ‚Üí
                                fDay
                                  { _1 = g b._1, _2 = g b._2 }
                                  ( Œª(p : { _1 : g b._1, _2 : g b._2 }) ‚Üí
                                      gMonoidal.product
                                        i
                                        ( Œª(gr : dObject) ‚Üí
                                          Œª ( gDay
                                            : Day/convolution
                                                cObject
                                                d
                                                c
                                                g
                                                g
                                                i
                                                gr
                                            ) ‚Üí
                                            gDay b fn p
                                        )
                                  )
                                  a
                            )
                      )
              }
            : MonoidalFunctor cObject v c e (Compose { _1 = f, _2 = g })
