let kArrow =
      ./../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

in    λ ( object
        : Kind
        )
    → λ ( cat
        : ./../Category/Semigroupal/Kind sha256:37baf05781aa3f5d1ee124aa740389e91a140fd0f5bd87594fd1d9f3b5ddc05d
          kArrow
          kProduct
          object
        )
    → λ ( semigroupoid
        : ./../Semigroupoid/Type sha256:7ea3ed050672efbe97058fdf8cee2c448261528fb9df88e77792684384125059
          object
          cat.arrow
        )
    → λ ( bifunctor
        : ./../Functor/Pair/Type sha256:b1d24e5acae4194d312c360e78a435fc987a229e434f4e5f0994e35adb5ee5c3
          object
          cat.arrow
          cat.op
        )
    → let Semigroup =
            ./Type sha256:d1635ee2a3c9117f5d330d01ec4ae277f46bd0726c670179994510a57c2fbc32
            object
            cat
      
      let Dagger =
            ./../Category/Dagger/Type sha256:5c54e6cfc68d8e5948c355658f18db9b3bcf21a6fdf436ac2ef80ee5eed192b7
            object
            cat.arrow
      
      in    { map =
                  λ(a : object)
                → λ(b : object)
                → λ(fn : Dagger { _1 = a, _2 = b })
                → λ(fa : Semigroup a)
                → { op =
                      semigroupoid.op
                      { _1 = cat.op { _1 = b, _2 = b }, _2 = b }
                      (   λ(r : Type)
                        → λ ( arrowsOut
                            :   ∀(z : object)
                              → cat.arrow { _1 = z, _2 = b }
                              → cat.arrow
                                { _1 = cat.op { _1 = b, _2 = b }, _2 = z }
                              → r
                            )
                        → arrowsOut
                          a
                          fn.to
                          ( semigroupoid.op
                            { _1 = cat.op { _1 = b, _2 = b }, _2 = a }
                            (   λ(r : Type)
                              → λ ( arrowsOut
                                  :   ∀(z : object)
                                    → cat.arrow { _1 = z, _2 = a }
                                    → cat.arrow
                                      { _1 = cat.op { _1 = b, _2 = b }, _2 = z }
                                    → r
                                  )
                              → arrowsOut
                                (cat.op { _1 = a, _2 = a })
                                fa.op
                                ( bifunctor.map
                                  { _1 = b, _2 = b }
                                  { _1 = a, _2 = a }
                                  { _1 = fn.from, _2 = fn.from }
                                )
                            )
                          )
                      )
                  }
            }
          : ./../Functor/Type sha256:fe94261bd581198ae1523ffbe7037159ad8327199b42ee3f97d16a7e1fa1dc79
            object
            Type
            Dagger
            ./../Function/Type sha256:44d58123a7ba6bd4f59a8f0fe8363ca585db3061ae3f369d3a26607a127f7927
            Semigroup
