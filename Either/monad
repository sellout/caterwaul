let Either = ./Type

in    λ(a : Type)
    →   { identity =
            λ(b : Type) → λ(x : b) → < Right = x | Left : a >
        , op =
              λ(b : Type)
            → λ(fa : Either { _1 = a, _2 = Either { _1 = a, _2 = b } })
            → merge
              { Left =
                  λ(l : a) → < Left = l | Right : b >
              , Right =
                  λ(e : < Left : a | Right : b >) → e
              }
              ( merge
                { Left =
                    λ(x : a) → < Left = x | Right : Either { _1 = a, _2 = b } >
                , Right =
                    λ(x : Either { _1 = a, _2 = b }) → < Right = x | Left : a >
                }
                fa
              )
        }
      : ./../Monad/Type
        Type
        ./../Function/Type
        (λ(b : Type) → Either { _1 = a, _2 = b })
