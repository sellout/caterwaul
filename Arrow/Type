let kCat =
      ./../Category/Cat/semigroupal sha256:de5b05c9640ea3ca0ee586c7102a982db79d3c0f0c92230cb2df19c7b986b513

let vObject = Type

let Category/Semigroupal =
      ./../Category/Semigroupal/Kind sha256:5d216a5d95721e6086fab2cd85f039d15a9d06b8a986ef170823a57a0c0d02d6

let extractCategory =
      ./../Category/Semigroupal/extractCategory sha256:e424ab1a06cccec93571da2bc08642157fd9e60030535233320a7e22c02d01b6

let Category =
      ./../Category/Type sha256:3983e08568dd06043567236a0b0ceb489d34346ea7cc29bd9c4d98bd567e03b9

let Strong =
      ./../Strong/Type sha256:8d15bf8a05c49b4d54bdcf05cbbbcb61976fe0e5723d2e2396693a9b4d6f4dc3

in    λ ( object
        : Kind
        )
    → λ ( v
        : ./../Category/Monoidal/Kind sha256:8e77a076f4c2f6e1d0ad07cfec37dfd04782e1a0a7e98a72a305233f69c494ca
          kCat
          Type
          vObject
        )
    → λ(cat : Category/Semigroupal kCat vObject object)
    → let base = extractCategory kCat vObject object cat
      
      in    { split :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → ∀(d : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = c, _2 = d }
                → cat.arrow
                  { _1 =
                      cat.product { _1 = a, _2 = c }
                  , _2 =
                      cat.product { _1 = b, _2 = d }
                  }
            , fanout :
                  ∀(a : object)
                → ∀(b : object)
                → ∀(c : object)
                → cat.arrow { _1 = a, _2 = b }
                → cat.arrow { _1 = a, _2 = c }
                → cat.arrow { _1 = a, _2 = cat.product { _1 = b, _2 = c } }
            }
          ⩓ Category object v base
          ⩓ Strong object object v base base cat.arrow
