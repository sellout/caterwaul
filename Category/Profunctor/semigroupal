{- This doesn’t use `extractSemigroupal` because I don’t know how to apply the
  `morphism` in the monoidal category instance.
-}
let kArrow =
      ./../../Function/Kind sha256:0b6372c593badac5fe880699fd1cf19dfba07c62fab935a8bad96915866f466e

let kProduct =
      ./../../Tuple/Kind sha256:03e1c52890f0cda1a2181cd3eb045d5344fc7c907fcbf836736c0e3222c5ffd8

in    λ ( object
        : Kind
        )
    → let profunctor =
            kArrow (kProduct object object) Type
      
      in    { arrow =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → ∀(a : { _1 : object, _2 : object }) → p._1 a → p._2 a
            , op =
                  λ(p : { _1 : profunctor, _2 : profunctor })
                → λ(a : { _1 : object, _2 : object })
                →   ∀(r : Type)
                  → (   ∀(z : object)
                      → p._1 { _1 = z, _2 = a._2 }
                      → p._2 { _1 = a._1, _2 = z }
                      → r
                    )
                  → r
            }
          : ./../Semigroupal/Kind sha256:37baf05781aa3f5d1ee124aa740389e91a140fd0f5bd87594fd1d9f3b5ddc05d
            kArrow
            kProduct
            profunctor
