let kArrow = ./../../../Function/Kind

let kProduct = ./../../../Tuple/Kind

let base = ./../../../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = base Type vObject ./../../../Category/Set/monoidal/cartesian

let setObject = Type

let Set = ./../../../Category/Set/monoidal/cartesian

let cat = base vObject setObject Set

in    λ(m : kArrow setObject setObject)
    → λ(functor : ./../../../Functor/Endo/Type vObject setObject v cat m)
    → λ(a : setObject)
    →   { map =
              λ(b : setObject)
            → λ(c : setObject)
            → λ(f : b → m c)
            → λ(t : Set.op { _1 = a, _2 = b })
            → functor.map
              c
              (Set.op { _1 = a, _2 = c })
              (λ(x : c) → t ⫽ { _2 = x })
              (f t._2)
        }
      : ./../../../Functor/Endo/Star/Type
        vObject
        setObject
        v
        cat
        m
        (λ(b : Type) → Set.op { _1 = a, _2 = b })
