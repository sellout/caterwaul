let kArrow = ./../../Function/Kind

let kProduct = ./../../Tuple/Kind

let base = ./../../Category/Monoidal/extractCategory kArrow kProduct

let vObject = Type

let v = base Type vObject ./../../Category/Set/monoidal/cartesian

let object = Type

let cat = ./../../Category/Set/monoidal/cartesian

in    λ(m : kArrow object object)
    → ./../../Functor/Monoidal/extractFunctor
      object
      v
      cat
      cat
      (./../Type object (base vObject object cat) m)
      (./monoidal m)
